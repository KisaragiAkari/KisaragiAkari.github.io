<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kisaragi&#39;s blog</title>
  
  <subtitle>φ(゜▽゜*)♪</subtitle>
  <link href="https://yozora0908.top/atom.xml" rel="self"/>
  
  <link href="https://yozora0908.top/"/>
  <updated>2024-03-09T11:52:29.573Z</updated>
  <id>https://yozora0908.top/</id>
  
  <author>
    <name>如月あかり</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>finite-calculus</title>
    <link href="https://yozora0908.top/2024/null/"/>
    <id>https://yozora0908.top/2024/null/</id>
    <published>2024-03-09T11:52:29.000Z</published>
    <updated>2024-03-09T11:52:29.573Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>真夏と少年の天ノ川戦争</title>
    <link href="https://yozora0908.top/2024/manatsu-to-shounen-no-tennokawa-sensou/"/>
    <id>https://yozora0908.top/2024/manatsu-to-shounen-no-tennokawa-sensou/</id>
    <published>2024-02-18T06:01:16.000Z</published>
    <updated>2024-02-24T06:23:04.468Z</updated>
    
    <content type="html"><![CDATA[<center><p>真夏の坂を駆ける自転車の</p><p>夏日神社旁边的小山坡上</p><p>背景のお社のすぐそばで</p><p>脚踏车飞快的奔驰着</p><p>らんランドセル放り投げそこで蹲る</p><p>我把双肩背包远远地丢下，蹲坐在那里</p><p>少女を僕は見つけてしまったんだ</p><p>我发现了少女，如此这般与我邂逅</p><p> </p><p>七月五日高一生の夏</p><p>夏天的七月五日我成为了高一新生</p><p>部活帰りの夕暮れに</p><p>在社团活动结束后归来的黄昏</p><p>のまれて消えてしまいそうなほど</p><p>暮色沉沉，几欲嗜人</p><p>小さな少女に話しかけてみたんだ</p><p>我试着跟小女孩说话</p><p>「どうしたの？」って</p><p>“怎么了？”</p><p>黙秘権の行使は</p><p>虽然规定了全国人民</p><p>全国民に約束されてるけど</p><p>有自我行使的沉默权力</p><p>やっぱこうも鮮やかにね</p><p>果然这种情况下也显然是如此呢</p><p>無視られると正直くるもんがあるんで orz</p><p>会被无视完全是理所当然的吧</p><p>なんてごちゃごちゃと呟いたって</p><p>什么乱七八糟的啊</p><p>相変わらず黙り込んでた少女が</p><p>一成不变沉默不语的女孩</p><p>何の拍子にか立ち上がって叫ぶ</p><p>猛然站了起来冲我大叫</p><p>「うっせーロリコン！」</p><p>“吵死了，你这萝莉控！”</p><p>「くーちゃんを返せって腐れ童が！」</p><p>“你这个坏蛋，把小久酱还给我！”</p><p>「どこにいるのか答えろ！」って？！</p><p>“你说，你把我的猫藏到哪里了？！”</p><p>飛び出した妄言 罵詈雑言</p><p>女孩冲过来胡乱的叫骂着</p><p>うわ、なんかまた泣きだしちゃった……</p><p>哇啊！又开始哭了起来呢……</p><p>「いや、僕は青春バカです。ハイ。」</p><p>“唉，我真是个青春笨蛋啊。”</p><p>いや何言ってんだボクは！ 僕は！</p><p>不，我在说什么啊！</p><p>動揺でもしてんですか？ホントさあ、もう……</p><p>我……是不是在动摇了呢？真是够了啊</p><p>何なんだってんだ！</p><p>什么跟什么啊！</p><p> </p><p>日はもう沈んじゃって</p><p>太阳已经下山了</p><p>世界は少し蒼くなって</p><p>世界却依然有着些许湛蓝</p><p>泣き疲れた少女は</p><p>哭到筋疲力尽的女孩</p><p>冷静を取り戻して</p><p>开始恢复了冷静</p><p>「くーちゃんは猫です、この辺に住んでんです。」</p><p>“小久酱是一只猫咪，就住在这附近。”</p><p>「でも、今日は何故かいないんです。」</p><p>“但是今天不知为什么不见了。”</p><p>「どこへ行ったのでしょうか？」</p><p>“是不是跑到其他什么地方去了呢？”</p><p>「よし、じゃあ明日探しに行こうか！！！」</p><p>“好吧，明天我陪你一起找吧！！！”</p><p>って僕は少女に提議したんだ</p><p>我对小女孩如是提议</p><p>そしたら一瞬驚いて、</p><p>女孩儿有点吃惊似的</p><p>照れくさそうに笑った</p><p>羞涩的笑了笑 （谢谢你啊，萝莉控）</p><p> </p><p>僕の夏よ爆ぜろ</p><p>我的夏天啊，就要爆裂了！</p><p>旦明の一等星よ</p><p>拂晓的那颗启明星哟</p><p>追い風を感ぜよ</p><p>感受下追逐而来的风吧</p><p>来世よ応答せよ</p><p>来世啊，请回答</p><p>終盤戦争大成功</p><p>终盘战争就要开始了</p><p>大誓文大計早々</p><p>大计划大誓约要趁早</p><p>僕らはただ</p><p>我们仅仅是</p><p>この場所に居たかったんだ……</p><p>想要待在这个地方……</p><p> </p><p>翌日は結局ドンマイで</p><p>不要介意第二天的结局如何</p><p>何の収穫も得られなくて</p><p>我们该怎么办</p><p>もうどうすりゃ良いかわかんないや！</p><p>什么收获都没有 我不知道这样算不算好</p><p>心で叫んでも空しくて</p><p>即使用心在叫也是徒劳</p><p>僕は現実を振り払って</p><p>我抛开现实</p><p>「明日にはきっと見つかるさ！」って。</p><p>“明天一定能够找得到！”</p><p>そんな僕に応えるように</p><p>就像是回应我的话语</p><p>笑う少女の笑顔が悲しくて……</p><p>女孩微笑的脸颊是那样的悲伤……</p><p>（悲しくて……）</p><p>那么悲伤，那么悲伤，那么悲伤……</p><p> </p><p>太陽が頭上を通り過ぎた</p><p>太阳从头上走过</p><p>部活帰りの昼下がり</p><p>社团活动结束回来的晌午过后</p><p>僕は昨日と同じ場所へ</p><p>我蹬着脚踏车</p><p>自転車漕いで向かっていた。</p><p>驶向昨日相同的地方</p><p>眼前にその社がある森が</p><p>眼前是神社边上的森林</p><p>見える坂を下る途上で僕は</p><p>下坡路上我遇到了</p><p>二、三人、いや三、四人の中学生と</p><p>两三个人 ，不，三四个中学生</p><p>その手にある袋が何故か気がかりで</p><p>不知什么缘故 有点对他们手里的袋子莫名的担心</p><p>取り敢えず僕は 少女の待つそこへ</p><p>我姑且还是先去女孩等着的地方吧</p><p>到着はしたが 果たしてそこには</p><p>到达的时候，那里果然站着</p><p>いつかの様子で 塞ぎ込む少女の</p><p>与往日一般，郁郁寡欢的女孩</p><p>足元辺りに 猫くらいの獣の</p><p>她脚的旁边是</p><p>首の無いぐちゃぐちゃの</p><p>一只无头的像猫一样的</p><p>亡骸が落ちていて</p><p>小动物的尸体</p><p>「狂ってんな……」</p><p>“我要疯了……”</p><p> </p><p>大破した 感情制限</p><p>我不顾一切，大喊着</p><p>爆声音 我を忘れて</p><p>几乎突破了我的感情极限</p><p>走り出した狂犬の</p><p>我像是疯狗一样</p><p>背中を見たんだ</p><p>冲了出去</p><p>駆け上がった先に</p><p>追上了刚才</p><p>群れる中坊兵を</p><p>成群结队的中学生</p><p>殴り倒して叫ぶんだ</p><p>怒吼着把他们打倒在地</p><p>「わからねぇよっ！」</p><p>“你们不知道吗！”</p><p>吐いて 吐いて 吐いて 吐いて</p><p>呕吐！呕吐！呕吐不止！</p><p>泣いて 掴み取ったもんは</p><p>我们哭着想要抓住的东西</p><p>こんなくだらない現実でしかないんだろうか？！ 就是这样毫无价值的现实啊是不是只能如此了呢？！</p><p>絶え間ない殴撃と</p><p>在连续不断的殴打</p><p>痛痒の終末に</p><p>与痛痒之后</p><p>突き落とされて</p><p>我被人从小山坡上</p><p>この坂を転がってく</p><p>推了下来</p><p>落ちてゆく</p><p>慢慢的滚落在那里</p><p> </p><p>目を開ければそこは星の巴</p><p>睁开眼，天空的彼岸是白昼与残夜的交融，星辰也游离于浩瀚的夜幕中</p><p>僕の手を掴み離さない</p><p>女孩紧紧抓住我的手</p><p>今は二人目を合わせないで</p><p>现在我们两人没有对视</p><p>ただ空を眺めていた</p><p>仅仅是眺望着星空</p></center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;
&lt;p&gt;真夏の坂を駆ける自転車の&lt;/p&gt;
&lt;p&gt;夏日神社旁边的小山坡上&lt;/p&gt;
&lt;p&gt;背景のお社のすぐそばで&lt;/p&gt;
&lt;p&gt;脚踏车飞快的奔驰着&lt;/p&gt;
&lt;p&gt;らんランドセル放り投げそこで蹲る&lt;/p&gt;
&lt;p&gt;我把双肩背包远远地丢下，蹲坐在那里&lt;/p&gt;
</summary>
      
    
    
    
    <category term="音乐" scheme="https://yozora0908.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="VOCALOID" scheme="https://yozora0908.top/tags/VOCALOID/"/>
    
  </entry>
  
  <entry>
    <title>『天气之子』读后感</title>
    <link href="https://yozora0908.top/2024/weathering-with-you/"/>
    <id>https://yozora0908.top/2024/weathering-with-you/</id>
    <published>2024-02-05T07:28:09.000Z</published>
    <updated>2024-02-23T08:31:07.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>关于我为什么买这本书。</p><p>就是在学校里和一个朋友彻夜畅聊二次元之后螈性大发，跑到学校书店一看，发现只有轻小说只有『刀剑神域』、『欢迎来到实力至上主义的教室』以及新海诚。</p><p>在我还能接触到互联网的时候，我对新海诚是相当不屑的，尤其讨厌他作品中弥漫着的现充气息。也因此，我至今没有接触过他的任何作品。</p><p>然后，我就心血来潮想买一本新海诚看看。</p><p>关于『你的名字』和『铃芽之旅』，前者太现充了，而我的朋友对后者的评价比较低，所以我就买了一本『天气之子』。之前我也听过『天气之子』的音乐，并且我很喜欢“雨过天晴”这个自然现象，因此我对这本书的第一印象比较好。</p><h2 id="情节">情节</h2><p>不过我觉得这本书的情节十分逆天就是了。</p><p>首先是贯穿全书的手枪，这个东西的出现就相当突兀——从垃圾桶中捡到来历不明的手枪，感觉十分逆天。结果这东西竟然成了推动情节的重要因素，开枪后不知道过了多久才被警方通缉不说，最后竟然又在杂草丛中捡到了自己先前扔掉的枪，成全匹夫之勇。感觉更加逆天。</p><p>然后就是主角被警察追捕，一群人帮主角逃亡，主角实现愿望拯救世界的情节总感觉在哪里见过。</p><p>然后就是天降大任于女主，女主拯救世界很开心但是身体受到反噬最终整个人消失，男主悲痛欲绝与世界为敌的俗套剧情。</p><p>只是单纯的不好看罢了。</p><p>前半部分写日常还能看得下去，但是矛盾激化后的情节是真的没有新意，会发生什么完全能够预料到。矛盾的制造感觉也非常离谱。</p><p>角色的心理描写感觉也差点意思。</p><p>然后我很快就看完了。</p><h2 id="评价">评价</h2><p>不好看。</p><p>不过能看出来，这部作品是靠着电影的精美画面与宏大场面吸引观众，并且让观众螈性大发从而降智来弥补剧情上的不足。此外，螈性大发的观众还会通过自己的主观臆想来从剧情、从主旨上主观升华这部作品。电影的效果很好，但由小说于没有了视觉效果，剧情的短板原形毕露。</p><p>笔者当年也是你 Orangestar的粉丝（什么成分懂得都懂），对这类作品也有一定的了解。虽然这套东西早就被玩烂了，但是面向主流低龄人群依然十分好用。</p><p>注意新海诚的 title 是知名动画导演。</p><h2 id="感想">感想</h2><p>能有什么感想呢？</p><p>我并不喜欢爱情为主导因素的小说与动画作品。</p><p>还记得刚入宅那会儿，恋爱番如日中天，在同学们的感染下我也看了不少，不过并不很喜欢。像是『四月是你的谎言』，我看了六七集后就看不下去了，觉得太无聊。但『来自风平浪静的明天』给我的感觉就非常不错。后来发现了萌番这一宝藏，然后就几乎不碰恋爱番了。</p><p>回到正题，如果抛开恋爱元素，本作还能剩下什么呢？显然只有一副精心打造的空壳罢了。因此，讨论本作的主旨就不能绕开男女主的恋情。回顾他们的恋爱故事，我很难找到什么深刻的东西。有一章的标题为“爱可以做到的事”，做到了什么事呢？“为了你，我变成狼人摸样~”之类的。我不禁头涔涔而泪潸潸了，有什么好说的啊！</p><p>但既然本文名叫读后感，那必须要写一点真正的感想。</p><ol type="1"><li>相信科学，坚持唯物主义。笔者是高贵的物化地组合，那么一定要坚信降雨和放晴都是有物质上的原因的。</li><li>反抗执法机关没有好下场。</li><li>不要胡思乱想关于人生的东西，更不要相信一个女生自述的年龄。</li><li>恋爱不如打原神</li></ol><p>关于“雨”，本作中的描写让人感觉那些雨水是冰凉的，音乐作品中也延续了这一风格，我不喜欢。</p><h2 id="后记">后记</h2><p>寒假前一直想着买几本好看的轻小说，回家一顿找发现真的没啥好看的。</p><p>这么一看『カゲロウデイズ』的故事情节还不错。</p><p>​</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;关于我为什么买这本书。&lt;/p&gt;
&lt;p&gt;就是在学校里和一个朋友彻夜畅聊二次元之后螈性大发，跑到学校书店一看，发现只有轻小说只有『刀剑神域』、『欢迎来到实力至上主义的教室』以及新海诚。&lt;/p&gt;
&lt;p&gt;在我还能接触到互联网的时候，我对新海诚是相当不屑的，尤其讨厌他作品中弥漫着的现充气息。也因此，我至今没有接触过他的任何作品。&lt;/p&gt;
&lt;p&gt;然后，我就心血来潮想买一本新海诚看看。&lt;/p&gt;
&lt;p&gt;关于『你的名字』和『铃芽之旅』，前者太现充了，而我的朋友对后者的评价比较低，所以我就买了一本『天气之子』。之前我也听过『天气之子』的音乐，并且我很喜欢“雨过天晴”这个自然现象，因此我对这本书的第一印象比较好。&lt;/p&gt;
&lt;h2 id=&quot;情节&quot;&gt;情节&lt;/h2&gt;
&lt;p&gt;不过我觉得这本书的情节十分逆天就是了。&lt;/p&gt;
&lt;p&gt;首先是贯穿全书的手枪，这个东西的出现就相当突兀——从垃圾桶中捡到来历不明的手枪，感觉十分逆天。结果这东西竟然成了推动情节的重要因素，开枪后不知道过了多久才被警方通缉不说，最后竟然又在杂草丛中捡到了自己先前扔掉的枪，成全匹夫之勇。感觉更加逆天。&lt;/p&gt;
&lt;p&gt;然后就是主角被警察追捕，一群人帮主角逃亡，主角实现愿望拯救世界的情节总感觉在哪里见过。&lt;/p&gt;</summary>
    
    
    
    <category term="言葉" scheme="https://yozora0908.top/categories/%E8%A8%80%E8%91%89/"/>
    
    
    <category term="闲话" scheme="https://yozora0908.top/tags/%E9%97%B2%E8%AF%9D/"/>
    
    <category term="感想" scheme="https://yozora0908.top/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Crying Prologue</title>
    <link href="https://yozora0908.top/2024/crying-prologue/"/>
    <id>https://yozora0908.top/2024/crying-prologue/</id>
    <published>2024-02-04T03:09:34.000Z</published>
    <updated>2024-02-04T03:10:23.972Z</updated>
    
    <content type="html"><![CDATA[<p>From：『カゲロウデイズ VIII -Summertime Reload-』</p><p> </p><p>……我一直在憧憬。</p><p> </p><p>就像疼爱我的亲人、路上偶遇的陌生人、有缘相识的朋友……向他们一样，我的内心深处一直充满憧憬。</p><p>比如说， 黑暗中有一个少女饱受孤独之苦，我想带她重新找到光明。</p><p>比如说，一个少年遭受无理的苛责，我想对他露出笑容。</p><p> </p><p>再比如说，像许多故事里常有的那样，当伙伴们被绝望笼罩时，我想指引他们走向希望。</p><p> </p><p>没错，我想成为那样的人，仿佛绘本里才有的完美角色。</p><p>我想改变自己，改变那个只能一味承受暴力的自己，改变连内心的支柱都无法守护的自己，改变只能无可奈何地畏惧人类本性的自己。</p><p> </p><p>没错，就是这样。</p><p>本该如此才对……</p><p> </p><p>“憧憬”是一种诅咒。</p><p>“想要成为某个样子”——本来只是单纯的祈愿，却总会慢慢变成焦虑，陷入不成为那样就不行的折磨中。最终，无法成为理想中的样子，让我觉得自己像怪物一样一文不值。</p><p>于是我背弃了丑陋不堪的自己，开始嫉妒他人，陷入深不见底的黑暗……这一切，就是憧憬带来的诅咒。</p><p> </p><p>真正的“怪物”，就在黑暗的最深处。</p><p>无法去爱任何人，也不被任何人所爱，只能一味诅咒他人陷入不幸，祈求保全自己……塑造出这样的怪物的，正是“憧憬”。</p><p> </p><p>怪物们向理想伸出手，却不断被拉向与理想完全相反的方向。至今，我听过太多那些怪物的“声音”。</p><p>“绝对不可能，只要是我就一定可以……”</p><p>他们打心底这样认为，并且抱着这样的信念活下去。</p><p>怪物们披着人皮，其实内部早就如同漆黑的淤泥。我在怪物扎堆的巢穴之中，只能拼命地伸出手……</p><p>直到伸出的手触碰到“憧憬”之前，我一直都没有意识到——</p><p> </p><p>我找到了想要守护的东西。</p><p>弱小的自己获得了力量。</p><p>我也幸运地与需要我的伙伴们相遇了。</p><p> </p><p>可我却怎么也找不到那份勇气——不从这些事物中逃开的勇气。</p><p> </p><p>是啊，如果最初就无法得到这些，或许更好。</p><p> </p><p>得到憧憬之物后，等待我的是失去一切的绝望，和深不见底的虚无感。</p><p>想要守护的事物的变幻莫测让我感到畏惧，名为伙伴的重压让我喘不过气来。</p><p> </p><p>“憧憬”是诅咒吗？</p><p>“幸福”是毒药吗？</p><p>“愿望”是罪恶吗？</p><p> </p><p>没能拯救她的我，已经无法知晓答案。</p><p>已然成为怪物的我，再也……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;From：『カゲロウデイズ VIII -Summertime Reload-』&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;……我一直在憧憬。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;就像疼爱我的亲人、路上偶遇的陌生人、有缘相识的朋友……向他们一样，我的内心深处一直充满憧憬。&lt;/p&gt;
&lt;p&gt;比如说， 黑暗中有一个少女饱受孤独之苦，我想带她重新找到光明。&lt;/p&gt;
&lt;p&gt;比如说，一个少年遭受无理的苛责，我想对他露出笑容。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;再比如说，像许多故事里常有的那样，当伙伴们被绝望笼罩时，我想指引他们走向希望。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="言葉" scheme="https://yozora0908.top/categories/%E8%A8%80%E8%91%89/"/>
    
    
    <category term="闲话" scheme="https://yozora0908.top/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>春日影</title>
    <link href="https://yozora0908.top/2024/haruhikage/"/>
    <id>https://yozora0908.top/2024/haruhikage/</id>
    <published>2024-01-20T11:57:30.000Z</published>
    <updated>2024-02-04T09:21:51.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词">词</h2><center><p>悴んだ心 ふるえる眼差し</p><p>内心满是憔悴 眼神颤抖不止</p><p>世界で 僕は ひとりぼっちだった</p><p>我在这世界孤独一人</p><p>散ることしか知らない春は</p><p>在不断凋零的春季中</p><p>毎年 冷たくあしらう</p><p>每年都只感受到冰冷</p><p> </p><p>暗がりの中 一方通行に</p><p>在一片黑暗中，单向往前走着</p><p>ただ ただ 言葉を書き殴って</p><p>我只能不断胡乱写着</p><p>期待するだけ むなしいと分かっていても</p><p>明知期待也是一场空</p><p>救いを求め続けた</p><p>却依然不断寻求救赎</p><p> </p><p>（せつなくて いとおしい）</p><p>（令人揪心又令人心爱）</p><p>今ならば 分かる気がする</p><p>若是如今 好像已经明白</p><p>（しあわせで くるおしい）</p><p>幸福却又让人心乱神迷</p><p>あの日泣けなかった僕を</p><p>照耀着无法哭泣的我</p><p>光は やさしく連れ立つよ</p><p>光芒温柔地携我同行</p><p> </p><p>雲間をぬって きらりきらり</p><p>穿过层层云朵 变得闪闪发光</p><p>心満たしては 溢れ</p><p>内心的思绪满溢而出</p><p>いつしか頬を きらりきらり</p><p>脸颊回过神来 也正闪闪发光</p><p>熱く 熱く濡らしてゆく</p><p>热泪沾湿了我的脸庞</p><p>君の手は どうしてこんなにも温かいの?</p><p>为什么你的手是如此地温暖</p><p>ねぇお願い</p><p>呐，拜托你</p><p>どうかこのまま 離さないでいて</p><p>请你从此再也不要放手</p><p> </p><p> </p><p>縁を結んでは ほどきほどかれ</p><p>人与人的缘分 总是断断续续</p><p>誰しもがそれを喜び 悲しみながら</p><p>人们在喜悦及悲伤中</p><p>愛を数えてゆく</p><p>细数一个又一个的爱</p><p>鼓動を確かめるように</p><p>为了确认内心的跳动</p><p> </p><p>（うれしくて さびしくて）</p><p>（令人喜悦却又叫人寂寞）</p><p>今だから 分かる気がした</p><p>此刻感觉好像能了解</p><p>（たいせつで こわくって）</p><p>（重要却又让人感到害怕）</p><p>あの日泣けなかった僕を</p><p>照耀着无法哭泣的我</p><p>光は やさしく抱きしめた</p><p>是光芒温柔地将我拥入怀中</p><p> </p><p> </p><p>照らされた世界 咲き誇る大切な人</p><p>在这阳光普照的世界 骄傲绽放的重要之人</p><p>あたたかさを知った春は</p><p>知晓何谓温暖的春天</p><p>僕のため 君のための 涙を流すよ</p><p>因为你我 而留下泪水</p><p>あぁ なんて眩しいんだろう</p><p>啊啊 多么地耀眼</p><p>あぁ なんて美しいんだろう...</p><p>啊啊 多么地美丽</p><p> </p><p> </p><p>雲間をぬって きらりきらり</p><p>穿过层层云朵 变得闪闪发光</p><p>心満たしては 溢れ</p><p>内心的思绪满溢而出</p><p>いつしか頬を きらりきらり</p><p>脸颊回过神来 也正闪闪发光</p><p>熱く 熱く濡らしてゆく</p><p>热泪沾湿了我的脸庞</p><p>君の手は どうしてこんなにも温かいの?</p><p>为什么你的手是如此地温暖</p><p>ねぇお願い</p><p>呐，拜托你</p><p>どうかこのまま 離さないでいて</p><p>请你从此再也不要放手</p><p> </p><p>ずっと ずっと 離さないでいて</p><p>永远 永远 再也不要放手</p></center><p><imgsrc="https://cdn-jp.imgs.moe/2024/01/20/111097803_p2_0iQq54s3NZ.jpg" srcset="/img/loading.gif" lazyload /></p><h2 id="话">话</h2><p>感觉越来越不善言辞了。</p><p>那一天，在北方隆冬的寒风中，我独自逃离了人群。</p><p>彷徨中想起了好多场景，好多人，好多话。</p><p>为什么……</p><p>我不需要方向，我不需要答案，我只是在憧憬着，</p><p>憧憬着那春日之影。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;词&quot;&gt;词&lt;/h2&gt;
&lt;center&gt;
&lt;p&gt;悴んだ心 ふるえる眼差し&lt;/p&gt;
&lt;p&gt;内心满是憔悴 眼神颤抖不止&lt;/p&gt;
&lt;p&gt;世界で 僕は ひとりぼっちだった&lt;/p&gt;
&lt;p&gt;我在这世界孤独一人&lt;/p&gt;
&lt;p&gt;散ることしか知らない春は&lt;/p&gt;
&lt;p&gt;在不断凋零的春季中&lt;/p&gt;
&lt;p&gt;毎年 冷たくあしらう&lt;/p&gt;
&lt;p&gt;每年都只感受到冰冷&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;暗がりの中 一方通行に&lt;/p&gt;
&lt;p&gt;在一片黑暗中，单向往前走着&lt;/p&gt;
&lt;p&gt;ただ ただ 言葉を書き殴って&lt;/p&gt;
&lt;p&gt;我只能不断胡乱写着&lt;/p&gt;
&lt;p&gt;期待するだけ むなしいと分かっていても&lt;/p&gt;
&lt;p&gt;明知期待也是一场空&lt;/p&gt;
&lt;p&gt;救いを求め続けた&lt;/p&gt;
&lt;p&gt;却依然不断寻求救赎&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;（せつなくて いとおしい）&lt;/p&gt;
&lt;p&gt;（令人揪心又令人心爱）&lt;/p&gt;
&lt;p&gt;今ならば 分かる気がする&lt;/p&gt;
&lt;p&gt;若是如今 好像已经明白&lt;/p&gt;
&lt;p&gt;（しあわせで くるおしい）&lt;/p&gt;
&lt;p&gt;幸福却又让人心乱神迷&lt;/p&gt;
&lt;p&gt;あの日泣けなかった僕を&lt;/p&gt;
&lt;p&gt;照耀着无法哭泣的我&lt;/p&gt;
&lt;p&gt;光は やさしく連れ立つよ&lt;/p&gt;
&lt;p&gt;光芒温柔地携我同行&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;雲間をぬって きらりきらり&lt;/p&gt;
&lt;p&gt;穿过层层云朵 变得闪闪发光&lt;/p&gt;
&lt;p&gt;心満たしては 溢れ&lt;/p&gt;
&lt;p&gt;内心的思绪满溢而出&lt;/p&gt;
&lt;p&gt;いつしか頬を きらりきらり&lt;/p&gt;
&lt;p&gt;脸颊回过神来 也正闪闪发光&lt;/p&gt;
&lt;p&gt;熱く 熱く濡らしてゆく&lt;/p&gt;
&lt;p&gt;热泪沾湿了我的脸庞&lt;/p&gt;
&lt;p&gt;君の手は どうしてこんなにも温かいの?&lt;/p&gt;
&lt;p&gt;为什么你的手是如此地温暖&lt;/p&gt;
&lt;p&gt;ねぇお願い&lt;/p&gt;
&lt;p&gt;呐，拜托你&lt;/p&gt;
&lt;p&gt;どうかこのまま 離さないでいて&lt;/p&gt;
&lt;p&gt;请你从此再也不要放手&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;縁を結んでは ほどきほどかれ&lt;/p&gt;
&lt;p&gt;人与人的缘分 总是断断续续&lt;/p&gt;
&lt;p&gt;誰しもがそれを喜び 悲しみながら&lt;/p&gt;
&lt;p&gt;人们在喜悦及悲伤中&lt;/p&gt;
&lt;p&gt;愛を数えてゆく&lt;/p&gt;
&lt;p&gt;细数一个又一个的爱&lt;/p&gt;
&lt;p&gt;鼓動を確かめるように&lt;/p&gt;
&lt;p&gt;为了确认内心的跳动&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;（うれしくて さびしくて）&lt;/p&gt;
&lt;p&gt;（令人喜悦却又叫人寂寞）&lt;/p&gt;
&lt;p&gt;今だから 分かる気がした&lt;/p&gt;
&lt;p&gt;此刻感觉好像能了解&lt;/p&gt;
&lt;p&gt;（たいせつで こわくって）&lt;/p&gt;
&lt;p&gt;（重要却又让人感到害怕）&lt;/p&gt;
&lt;p&gt;あの日泣けなかった僕を&lt;/p&gt;
&lt;p&gt;照耀着无法哭泣的我&lt;/p&gt;
&lt;p&gt;光は やさしく抱きしめた&lt;/p&gt;
&lt;p&gt;是光芒温柔地将我拥入怀中&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;照らされた世界 咲き誇る大切な人&lt;/p&gt;
&lt;p&gt;在这阳光普照的世界 骄傲绽放的重要之人&lt;/p&gt;
&lt;p&gt;あたたかさを知った春は&lt;/p&gt;
&lt;p&gt;知晓何谓温暖的春天&lt;/p&gt;
&lt;p&gt;僕のため 君のための 涙を流すよ&lt;/p&gt;
&lt;p&gt;因为你我 而留下泪水&lt;/p&gt;
&lt;p&gt;あぁ なんて眩しいんだろう&lt;/p&gt;
&lt;p&gt;啊啊 多么地耀眼&lt;/p&gt;
&lt;p&gt;あぁ なんて美しいんだろう...&lt;/p&gt;
&lt;p&gt;啊啊 多么地美丽&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;雲間をぬって きらりきらり&lt;/p&gt;
&lt;p&gt;穿过层层云朵 变得闪闪发光&lt;/p&gt;
&lt;p&gt;心満たしては 溢れ&lt;/p&gt;
&lt;p&gt;内心的思绪满溢而出&lt;/p&gt;
&lt;p&gt;いつしか頬を きらりきらり&lt;/p&gt;
&lt;p&gt;脸颊回过神来 也正闪闪发光&lt;/p&gt;
&lt;p&gt;熱く 熱く濡らしてゆく&lt;/p&gt;
&lt;p&gt;热泪沾湿了我的脸庞&lt;/p&gt;
&lt;p&gt;君の手は どうしてこんなにも温かいの?&lt;/p&gt;
&lt;p&gt;为什么你的手是如此地温暖&lt;/p&gt;
&lt;p&gt;ねぇお願い&lt;/p&gt;
&lt;p&gt;呐，拜托你&lt;/p&gt;
&lt;p&gt;どうかこのまま 離さないでいて&lt;/p&gt;
&lt;p&gt;请你从此再也不要放手&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;ずっと ずっと 離さないでいて&lt;/p&gt;
&lt;p&gt;永远 永远 再也不要放手&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-jp.imgs.moe/2024/01/20/111097803_p2_0iQq54s3NZ.jpg&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h2 id=&quot;话&quot;&gt;话&lt;/h2&gt;
&lt;p&gt;感觉越来越不善言辞了。&lt;/p&gt;
&lt;p&gt;那一天，在北方隆冬的寒风中，我独自逃离了人群。&lt;/p&gt;
&lt;p&gt;彷徨中想起了好多场景，好多人，好多话。&lt;/p&gt;
&lt;p&gt;为什么……&lt;/p&gt;
&lt;p&gt;我不需要方向，我不需要答案，我只是在憧憬着，&lt;/p&gt;
&lt;p&gt;憧憬着那春日之影。&lt;/p&gt;</summary>
    
    
    
    <category term="音乐" scheme="https://yozora0908.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="MyGO!!!!!" scheme="https://yozora0908.top/tags/MyGO/"/>
    
  </entry>
  
  <entry>
    <title>未完成タイムリミッター</title>
    <link href="https://yozora0908.top/2024/mikansei-timelimit/"/>
    <id>https://yozora0908.top/2024/mikansei-timelimit/</id>
    <published>2024-01-20T11:32:55.000Z</published>
    <updated>2024-01-20T12:13:34.519Z</updated>
    
    <content type="html"><![CDATA[<center><p>「そりゃ何でも上手くはいかないもんだって」</p><p>「实在是因为什麼都做不好啊」</p><p>そんなわかっちゃいる声も存外刺さって</p><p>那种我早明白的话，也意外的紥进心中</p><p> </p><p>この単調な日々の間で「愛」を待って</p><p>在这单调的日常裏，等待「爱」</p><p>「結局人生つまらないや！」　なんて宣う</p><p>「说到底人生无聊透顶！」 如此宣言</p><p> </p><p>不確かな今を生く</p><p>生活於不确定的现在</p><p>未来さえも霧の中</p><p>连未来也在雾中</p><p>でも完全な空の色</p><p>但是想象起来</p><p>思い描くの……</p><p>完全的天穹之色……</p><p> </p><p>また明日は来るのかな？</p><p>明天还会再来吗？</p><p>運命は何をすんだ？</p><p>命运在干些什麼呢？</p><p>あなたに恋をした</p><p>恋上你的我</p><p>僕はどうなんの？</p><p>又怎样呢？</p><p> </p><p> </p><p>完全を繰り返し</p><p>循环著完全</p><p>今日やっと見つけそうな</p><p>今天似乎终於找到了</p><p>この回生の意味さえも</p><p>连这一次的生存意义</p><p>もう関係ないの…？</p><p>也已经没关联吗？</p><p> </p><p>笑えたら良いですか？</p><p>笑起来就好了吗？</p><p>後悔は無いのですか？</p><p>没有后悔了吗？</p><p>こんな遺憾な生涯を</p><p>想要送走这样</p><p>送ってたいの？</p><p>遗憾的生涯吗？</p><p> </p><p> </p><p>踏ん張ってりゃいつか笑えるのかい？</p><p>不停地挣紥就能笑出来吗？</p><p>頑張ってりゃいつか報われるのかい？</p><p>努力的话就能得到回报吗？</p><p>息を吸って吐いてまた見上げて</p><p>吸气呼气在抬眼仰望</p><p>映った空は、余りにも僕には綺麗過ぎて……</p><p>映入眼帘的天空，对我未免太过美丽了……</p><p> </p><p>あぁ</p><p> </p><p>泣いてしまったんだ　巡り巡る季節に溶け出してく</p><p>嚎啕而泣，在轮回流转的季节中，溶解开去</p><p>希望の音　太陽を背に受け　煌いては奏でて</p><p>希望之音，艳阳在背，辉光奏鸣</p><p>完全くらいの　浅き幻は　もう風に舞って</p><p>所谓完全之类的浅薄的梦幻，早已随风舞去</p><p>途端に世界は　新しい色で廻り始めてゆく</p><p>世界瞬间以新的颜色开始运转</p><p> </p><p>時間ならあるさ！</p><p>要说时间还是有的啊！</p></center><p><imgsrc="https://cdn-nl.imgs.moe/2024/01/20/84510651_p0_geBs11gSil.jpg" srcset="/img/loading.gif" lazyload /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;
&lt;p&gt;「そりゃ何でも上手くはいかないもんだって」&lt;/p&gt;
&lt;p&gt;「实在是因为什麼都做不好啊」&lt;/p&gt;
&lt;p&gt;そんなわかっちゃいる声も存外刺さって&lt;/p&gt;
&lt;p&gt;那种我早明白的话，也意外的紥进心中&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;この単調な日々の間で「</summary>
      
    
    
    
    <category term="音乐" scheme="https://yozora0908.top/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="VOCALOID" scheme="https://yozora0908.top/tags/VOCALOID/"/>
    
  </entry>
  
  <entry>
    <title>「组合数学」北大版《组合数学》#1</title>
    <link href="https://yozora0908.top/2024/note-combinatorics-pku-1/"/>
    <id>https://yozora0908.top/2024/note-combinatorics-pku-1/</id>
    <published>2024-01-20T09:58:56.000Z</published>
    <updated>2024-01-20T11:28:42.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="偏序集相关">偏序集相关</h2><p>设 <span class="math inline">\(X\)</span> 为一个非空集合，<spanclass="math inline">\(\leqslant\)</span> 是定义在 <spanclass="math inline">\(X\)</span>上的，具有<strong>自反性</strong>，<strong>反对称性</strong>和<strong>传递性</strong>的二元关系，则称<span class="math inline">\(\textbf{P}=(X,\leqslant)\)</span>为一个偏序集。</p><p>对于偏序集 <span class="math inline">\((X,P)\)</span>，若 <spanclass="math inline">\(\forall x,y \in X\)</span>，存在 <spanclass="math inline">\(x \leqslant y\)</span> 或 <spanclass="math inline">\(y \leqslant x\)</span>，则称 <spanclass="math inline">\(P\)</span>为一个<strong>全序集</strong>，也称为<strong>链</strong>。</p><p>对于偏序集 <span class="math inline">\((X,P)\)</span>，若 <spanclass="math inline">\(\forall x,y \in X\)</span>，不存在 <spanclass="math inline">\(x \leqslant y\)</span> 和 <spanclass="math inline">\(y \leqslant x\)</span>，则称 <spanclass="math inline">\(P\)</span> 为一个<strong>反链</strong>。</p><p>偏序集 <span class="math inline">\(\textbf{P}\)</span>的最长子链的长度称为 <span class="math inline">\(\textbf{P}\)</span>的高度，最长子反链的长度称为 <spanclass="math inline">\(\textbf{P}\)</span> 的宽度。</p><p>称 <span class="math inline">\(z\)</span> 为偏序集 <spanclass="math inline">\(\textbf{P}\)</span> 的极小元，当且仅当 <spanclass="math inline">\(\forall x \in X \land x \neq z\)</span>，有 <spanclass="math inline">\(z \leqslantx\)</span>。显然所有极小元可以构成一个反链。</p><p>称 <span class="math inline">\(z\)</span> 为偏序集 <spanclass="math inline">\(\textbf{P}\)</span> 的最小元，当且仅当 <spanclass="math inline">\(\forall x \in X\)</span>，有 <spanclass="math inline">\(z \leqslant x\)</span>。</p><p><span class="math inline">\(\text{Lemma}\)</span></p><blockquote><p>设偏序集 <span class="math inline">\((X,\leqslant)\)</span> 的高度为<span class="math inline">\(n\)</span>，则存在划分 <spanclass="math inline">\(X = \bigcup_{i=1}^n A_i\)</span>，是的每个 <spanclass="math inline">\(A_i\)</span> 都是反链。</p></blockquote><p><span class="math inline">\(\text{Dilworth&#39;stheorem}\)</span></p><blockquote><p>设有限偏序集 <span class="math inline">\((X,\leqslant)\)</span>的宽度为 <span class="math inline">\(m\)</span>，则存在划分 <spanclass="math inline">\(X = \bigcup_{i=1}^m C_i\)</span>，是的每个 <spanclass="math inline">\(C_i\)</span> 都是反链。</p></blockquote><h2 id="初等计数方法">初等计数方法</h2><p><span class="math inline">\(\text{Problem}\)</span></p><blockquote><p>考虑划分一个大小为 <span class="math inline">\(n\)</span>的集合，对于 <span class="math inline">\(i \in [1,k] \cap\mathbb{Z}\)</span>，要求存在 <span class="math inline">\(b_i\)</span>个大小为 <span class="math inline">\(i\)</span> 的无标号集合，并且满足<span class="math inline">\(\sum_{i=1}^k i \timesb_i=n\)</span>，求方案数。</p></blockquote><p><span class="math inline">\(\text{Solution}\)</span></p><p>先做多重组合，然后对大小相同的集合下标号。 <spanclass="math display">\[\frac{1}{\prod_{i=1}^k b_i!}\binom{n}{1,\ldots,1,2,\ldots,2,\ldots,k,\ldots,k}\]</span> <span class="math inline">\(\text{Problem}\)</span></p><blockquote><p>对于字符串<code>NASHVILLETENNESSEE</code>，有多少本质不同的排列满足</p><ol type="1"><li>第一个<code>N</code>在所有的<code>S</code>之前。</li><li><code>T</code>在第一个<code>E</code>之后。</li></ol><p>其中有 <span class="math inline">\(3\)</span> 个<code>N</code>，<spanclass="math inline">\(2\)</span> 个<code>L</code>，<spanclass="math inline">\(3\)</span> 个<code>S</code>，<spanclass="math inline">\(5\)</span>个<code>E</code>，<code>A</code>，<code>H</code>，<code>V</code>，<code>I</code>，<code>T</code>各<span class="math inline">\(1\)</span> 个。</p></blockquote><p><span class="math inline">\(\text{Solution}\)</span></p><p>先划分再合并。</p><p>不受限制的字符可以任意排列，方案数 <spanclass="math inline">\(\binom{6}{2,1,1,1,1}\)</span>。</p><p>对于限制 1，得到<code>NSSS</code>后插入 <spanclass="math inline">\(2\)</span> 个<code>N</code>即可，方案数 <spanclass="math inline">\(\binom{5}{2}\)</span>。（为了放置重复，事实上这个是<span class="math inline">\(3\)</span> 个<code>S</code>与 <spanclass="math inline">\(2\)</span>个<code>N</code>的多重集全排列）。还有另一种方法，即先任意排列，然后非法方案一定满足开头不是<code>N</code>，这样的排列数量正好占一半，即<span class="math inline">\(\frac{\binom{6}{3}}{2} =\binom{5}{2}\)</span>。</p><p>对于限制 2，直接插入<code>T</code>即可，方案数 <spanclass="math inline">\(\binom{5}{1}\)</span>。最后合并各个部分，要求每个部分的相对顺序不变。注意到每个部分无关，因此等价于多重集全排列，方案数<span class="math inline">\(\binom{18}{6,6,6}\)</span>。</p><p>综上，答案为 <spanclass="math inline">\(\binom{5}{1}\binom{5}{2}\binom{6}{2,1,1,1,1}\binom{18}{6,6,6}\)</span>。</p><p> </p><h2 id="exercise-1">Exercise 1</h2><h3 id="section">2</h3><p>利用虚数单位 <span class="math inline">\(\text{i}\)</span>的性质。</p><p><span class="math inline">\(X = \{a+b \text{i}| a \in [1,l] \cap\mathbb{Z}, b \in [1,w] \cap \mathbb{Z}\}\)</span>。</p><p><span class="math inline">\(x \leqslant y\)</span>，当且仅当 <spanclass="math inline">\(x - y \ge 0\)</span>。</p><h3 id="section-1">3</h3><ol start="5" type="a"><li><p>按照字典序排序，本质上就是相同字符不考虑标号，因此答案就是 <spanclass="math inline">\(\binom{26+4-1}{4}\)</span>。</p></li><li><p><span class="math inline">\(\sum_{i=1}^{12}[x^i]\Big((\sum_{j=0}^{5}x^j)(\sum_{j=0}^{7}x^j)\Big)\)</span></p></li></ol><h3 id="section-2">4</h3><p>随便插空即可。</p><p><spanclass="math inline">\(7!\binom{8}{5};(7-1)!\binom{7}{5}\)</span></p><h3 id="section-3">5</h3><p>固定住 <span class="math inline">\(2\)</span>个<code>I</code>后再安排别的字符会产生重复。</p><p>容斥掉即可。</p><p><span class="math inline">\(\binom{11}{1,2,4,4} -\binom{7}{1,2,4}\binom{8}{4}\)</span>。</p><h3 id="section-4">6</h3><p>懒得做。</p><h3 id="section-5">7</h3><p>枚举第一个集合选多少个然后推式子。 <span class="math display">\[\sum_{i=0}^5 \binom{r-i+k-1-1}{k-1-1} = \sum_{i=r-5}^r\binom{k-2+1}{k-2} = \binom{k+r-1}{k-2} - \binom{k+r-7}{k-1}\]</span></p><h3 id="section-6">8</h3><p>枚举二者再推式子。 <span class="math display">\[\begin{align*}\sum_{i=0}^n \sum_{j=0}^m \binom{i+j}{i} - 1  &amp;= \sum_{i=0}^n\binom{i+m+1}{i+1} -1\\&amp;= \sum_{i=1}^{n+1} \binom{i+m}{m} - 1\\&amp;= \binom{n+m+2}{m+1}-2\end{align*}\]</span></p><h3 id="section-7">9</h3><p><span class="math display">\[\sum_{i=0}^{2011} \binom{i-1}{9-1} = \sum_{i=-8}^{2022} \binom{i+8}{8} =\binom{2002+8+1}{8+1}\]</span></p><p><span class="math display">\[\sum_{i=0}^{2011}\binom{i+8}{8} = \binom{2020}{9}\]</span></p><h3 id="section-8">10</h3><p>考虑大小为 <span class="math inline">\(kn\)</span> 的集合，划分成<span class="math inline">\(k\)</span> 个大小为 <spanclass="math inline">\(n\)</span> 的有标号集合的方案数。</p><h3 id="section-9">11</h3><h4 id="a">a</h4><p>显然</p><h4 id="b">b</h4><p><span class="math display">\[\sum_{k} (-1)^k \binom{n-k}{m-k}\binom{n}{k} = \binom{n}{m} \sum_{k}(-1)^k \binom{m}{k}\]</span></p><h4 id="c">c</h4><p><span class="math display">\[\sum_{k} \binom{n-k}{n-m}\binom{n}{k} = \binom{n}{m} \sum_{k}\binom{m}{k}\]</span></p><h4 id="d">d</h4><p>记 <span class="math inline">\(a_n= \sum_{k=0}^n\binom{n+k}{n}2^{-k}\)</span>，则 <span class="math display">\[\begin{align*}a_n &amp;= \sum_{k=0}^{n} \binom{n+k}{n}2^{-k}\\&amp;= \sum_{k=0}^{n} \left(\binom{n+k-1}{n-1}+\binom{n+k-1}{n} \right)2^{-k}\\&amp;= \sum_{k=0}^{n} \binom{n+k-1}{n-1}2^{-k} + \sum_{k=0}^n\binom{n+k}{n}2^{-(k+1)}\\&amp;= a_{n-1}+ \frac{1}{2}a_n\end{align*}\]</span> 因此 <span class="math inline">\(a_1=1, a_n =2a_{n-1}\)</span>。</p><h4 id="e">e</h4><p><span class="math display">\[\sum_{j}\binom{k}{j}\binom{l}{j}\binom{n+k+l-j}{k+l} = \binom{n+k}{k}\binom{n+l}{l}\]</span></p><p>考虑 <spanclass="math inline">\((1+x)^{n+l}(1+y)^{l}(1+x+y)^{k}\)</span> 中 <spanclass="math inline">\(x^{l+k}y^l\)</span> 的系数。</p><p>对于左边，以 <span class="math inline">\(y^l\)</span> 为主元，枚举<span class="math inline">\((1+x+y)^k\)</span> 对 <spanclass="math inline">\(y^l\)</span> 的贡献 <spanclass="math inline">\(y^i\)</span>，然后另外两者的贡献都能确定，不再赘述。</p><p>对于右边，以 <span class="math inline">\(x^{l+k}\)</span>为主元，枚举 <span class="math inline">\((1+x)^{n+l}\)</span> 的贡献<span class="math inline">\(x^i\)</span>，故技重施，得到 <spanclass="math display">\[\begin{align*}\sum_{i=l}^{n+l} \binom{n+l}{i} \binom{k}{l+k-i}\binom{i}{l} &amp;=\sum_{i=0}^{n} \binom{n+l}{i+l}\binom{k}{k-i}\binom{i+l}{l}\\&amp;= \sum_{i=0}^{n}\binom{n+l}{l}\binom{n}{i}\binom{k}{k-i}\\&amp;= \binom{n+l}{l}\binom{n+k}{k}\end{align*}\]</span></p><h4 id="f">f</h4><p><span class="math display">\[\begin{align*}\binom{n+m}{m+j} = \sum_{k=0}^{m+j}\binom{n}{k}\binom{m}{m+j-k} &amp;=\sum_{k=j}^{m+j}\binom{n}{k}\binom{m}{m+j-k}\\&amp;= \sum_{k=0}^{m} \binom{n}{k+j}\binom{m}{m-k}\\&amp;= \sum_{k=0}^m \binom{n}{k+j}\binom{m}{k}\end{align*}\]</span></p><h4 id="g">g</h4><p><span class="math display">\[\begin{align*}\binom{-\alpha}{n} &amp;=\frac{(-\alpha)(-\alpha-1)\cdots(-\alpha-n+1)}{n!}\\&amp;=\frac{(-\alpha)(-\left(\alpha+1)\right)\cdots\left(-(\alpha+n-1)\right)}{n!}\\&amp;= (-1)^n \binom{\alpha+n-1}{n}\end{align*}\]</span></p><h2 id="递推关系">递推关系</h2><h2 id="gf相关">GF相关</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;偏序集相关&quot;&gt;偏序集相关&lt;/h2&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;&#92;(X&#92;)&lt;/span&gt; 为一个非空集合，&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;leqslant&#92;)&lt;/span&gt; 是定义在 &lt;span class=&quot;math inline&quot;&gt;&#92;(X&#92;)&lt;/span&gt;
上的，具有&lt;strong&gt;自反性&lt;/strong&gt;，&lt;strong&gt;反对称性&lt;/strong&gt;和&lt;strong&gt;传递性&lt;/strong&gt;的二元关系，则称
&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}=(X,&#92;leqslant)&#92;)&lt;/span&gt;
为一个偏序集。&lt;/p&gt;
&lt;p&gt;对于偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;((X,P)&#92;)&lt;/span&gt;，若 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;forall x,y &#92;in X&#92;)&lt;/span&gt;，存在 &lt;span class=&quot;math inline&quot;&gt;&#92;(x &#92;leqslant y&#92;)&lt;/span&gt; 或 &lt;span class=&quot;math inline&quot;&gt;&#92;(y &#92;leqslant x&#92;)&lt;/span&gt;，则称 &lt;span class=&quot;math inline&quot;&gt;&#92;(P&#92;)&lt;/span&gt;
为一个&lt;strong&gt;全序集&lt;/strong&gt;，也称为&lt;strong&gt;链&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;((X,P)&#92;)&lt;/span&gt;，若 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;forall x,y &#92;in X&#92;)&lt;/span&gt;，不存在 &lt;span class=&quot;math inline&quot;&gt;&#92;(x &#92;leqslant y&#92;)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;&#92;(y &#92;leqslant x&#92;)&lt;/span&gt;，则称 &lt;span class=&quot;math inline&quot;&gt;&#92;(P&#92;)&lt;/span&gt; 为一个&lt;strong&gt;反链&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}&#92;)&lt;/span&gt;
的最长子链的长度称为 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}&#92;)&lt;/span&gt;
的高度，最长子反链的长度称为 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}&#92;)&lt;/span&gt; 的宽度。&lt;/p&gt;
&lt;p&gt;称 &lt;span class=&quot;math inline&quot;&gt;&#92;(z&#92;)&lt;/span&gt; 为偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}&#92;)&lt;/span&gt; 的极小元，当且仅当 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;forall x &#92;in X &#92;land x &#92;neq z&#92;)&lt;/span&gt;，有 &lt;span class=&quot;math inline&quot;&gt;&#92;(z &#92;leqslant
x&#92;)&lt;/span&gt;。显然所有极小元可以构成一个反链。&lt;/p&gt;
&lt;p&gt;称 &lt;span class=&quot;math inline&quot;&gt;&#92;(z&#92;)&lt;/span&gt; 为偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;textbf{P}&#92;)&lt;/span&gt; 的最小元，当且仅当 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;forall x &#92;in X&#92;)&lt;/span&gt;，有 &lt;span class=&quot;math inline&quot;&gt;&#92;(z &#92;leqslant x&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;text{Lemma}&#92;)&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设偏序集 &lt;span class=&quot;math inline&quot;&gt;&#92;((X,&#92;leqslant)&#92;)&lt;/span&gt; 的高度为
&lt;span class=&quot;math inline&quot;&gt;&#92;(n&#92;)&lt;/span&gt;，则存在划分 &lt;span class=&quot;math inline&quot;&gt;&#92;(X = &#92;bigcup_{i=1}^n A_i&#92;)&lt;/span&gt;，是的每个 &lt;span class=&quot;math inline&quot;&gt;&#92;(A_i&#92;)&lt;/span&gt; 都是反链。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;text{Dilworth&amp;#39;s
theorem}&#92;)&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://yozora0908.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="组合数学" scheme="https://yozora0908.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>マリーの架空世界</title>
    <link href="https://yozora0908.top/2024/mari/"/>
    <id>https://yozora0908.top/2024/mari/</id>
    <published>2024-01-01T12:46:01.000Z</published>
    <updated>2024-02-13T12:34:42.235Z</updated>
    
    <content type="html"><![CDATA[<p>From：『カゲロウデイズ VIII -Summertime Reload-』</p><h2 id="目を瞑る话">目を瞑る话</h2><p> </p><p>我听到了一个非常非常不可思议的故事。</p><p> </p><p>故事里，我是一个公主。我一直孤身一人，非常寂寞。</p><p> </p><p>有一天，来了一个小小的王子，告诉我不要再害怕。他带我离开了这里。</p><p> </p><p>外面的世界有形形色色的人，不知何时，有了一群伙伴一起旅行。</p><p> </p><p>大家都有红色的眼睛，他们总是吵吵闹闹，但是却一直在笑。我看到他们，也常常笑着。</p><p> </p><p>我是没有华丽衣裙的公主，但是能够在那个我一直无比憧憬的世界里旅行，真的非常非常幸福。</p><p> </p><p>不幸的是，旅途中出现了邪恶的蛇怪。我战斗了，然后失败了。唯有这一点，让我无比悔恨。</p><p> </p><p>所以，我和王子许下约定。</p><p> </p><p> </p><p>「世界就要结束了，但下一次还要一起去旅行」</p><p> </p><p>世界结束前的那一天，我们一起去看了很大的花朵，作为约定的见证。</p><p> </p><p>那是闪耀在夜空的魔法之花，我从来没有见过这么大的花朵，那么美丽，让人无法忘记。</p><p> </p><p>下一个世界将会多么美好？</p><p> </p><p>下一个故事将会多么不可思议？</p><p> </p><p>不论怎样的世界，我一定都会非常幸福。</p><p> </p><p>只要能再次和你相遇。</p><p> </p><center>我一定……</center><p> </p><p> </p><p><imgsrc="https://cdn-jp.imgs.moe/2024/01/20/106591909_p0_5oCLuxdo9O.jpg" srcset="/img/loading.gif" lazyload /></p><p><imgsrc="https://cdn-jp.imgs.moe/2024/01/20/106591909_p1_Ya2KNwdFo8.jpg" srcset="/img/loading.gif" lazyload /></p><p><imgsrc="https://cdn-jp.imgs.moe/2024/01/20/106591909_p2_kcZ0BcUIID.jpg" srcset="/img/loading.gif" lazyload /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;From：『カゲロウデイズ VIII -Summertime Reload-』&lt;/p&gt;
&lt;h2 id=&quot;目を瞑る话&quot;&gt;目を瞑る话&lt;/h2&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;我听到了一个非常非常不可思议的故事。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;故事里，我是一个公主。我一直孤身一人，非常寂寞。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;有一天，来了一个小小的王子，告诉我不要再害怕。他带我离开了这里。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;外面的世界有形形色色的人，不知何时，有了一群伙伴一起旅行。&lt;/p&gt;</summary>
    
    
    
    <category term="言葉" scheme="https://yozora0908.top/categories/%E8%A8%80%E8%91%89/"/>
    
    
    <category term="闲话" scheme="https://yozora0908.top/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>「NOIP Record」#25 Summertime Reload</title>
    <link href="https://yozora0908.top/2024/noip-record-25/"/>
    <id>https://yozora0908.top/2024/noip-record-25/</id>
    <published>2024-01-01T11:46:10.000Z</published>
    <updated>2024-02-23T08:37:27.060Z</updated>
    
    <content type="html"><![CDATA[<p>失败者所做的一切，不过是增添笑料罢了。</p><p>一切又回到原来那样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;失败者所做的一切，不过是增添笑料罢了。&lt;/p&gt;
&lt;p&gt;一切又回到原来那样。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Record" scheme="https://yozora0908.top/categories/Record/"/>
    
    
    <category term="闲话" scheme="https://yozora0908.top/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>神秘数数题 divide 题解</title>
    <link href="https://yozora0908.top/2023/divide-solution/"/>
    <id>https://yozora0908.top/2023/divide-solution/</id>
    <published>2023-11-16T11:38:57.000Z</published>
    <updated>2024-01-01T12:30:45.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>构造 <span class="math inline">\(K\)</span> 个正整数序列，第 <spanclass="math inline">\(i\)</span> 个序列为 <spanclass="math inline">\(a_i\)</span>，长度为 <spanclass="math inline">\(l_i\)</span>，满足 <spanclass="math inline">\(\forall i, \sum_{j=1}^{l_i} a_{i,j} =n\)</span>，且 <span class="math display">\[\prod_{i=1}^k \min_{j=1}^{l_i} \{a_{i,j}\} \le m\]</span> 给定 <spanclass="math inline">\(n,K,m\)</span>，求构造的方案数，对 <spanclass="math inline">\(998244353\)</span> 取模。</p><p>两种方案不同，当且仅当存在一个 <spanclass="math inline">\(i\)</span>，满足两种方案的 <spanclass="math inline">\(a_i\)</span> 不同。</p><p><span class="math inline">\(1 \le n,m \le 10^5\)</span>，<spanclass="math inline">\(1 \le K \le 10^9\)</span>。</p><h2 id="solution">Solution</h2><p>先考虑一个序列怎么构造。</p><p>设 <span class="math inline">\(g(k)\)</span>为构造一个序列，满足每个数都大于 <span class="math inline">\(i\)</span>的方案数，有 <span class="math display">\[g(k) = \sum_{i=1}^{n-ik} \binom{n-ik-1}{i-1}\]</span></p><p>设 <span class="math inline">\(f(i,j)\)</span> 为已经构造了 <spanclass="math inline">\(i\)</span> 个序列，当前最小值为 <spanclass="math inline">\(j\)</span> 的方案数。最小值恰好为 <spanclass="math inline">\(i\)</span> 的序列数就是 <spanclass="math inline">\(f(1,i) = g(i-1) - g(i)\)</span>。</p><p>转移 <span class="math display">\[f(i,j) \times f(1,k) \rightarrow f(i+1,j \times k)\]</span> <span class="math inline">\(j \times k \lem\)</span>，所以上述 DP 的复杂度是 <span class="math inline">\(O(Kn \logm)\)</span>。</p><p>虽然 <span class="math inline">\(K\)</span>很大，但是转移很机械，并且有结合律，考虑倍增。</p><p>考虑对每个 <span class="math inline">\(i\)</span>，预处理 <spanclass="math inline">\(f^k(i)\)</span> 表示构造 <spanclass="math inline">\(2^k\)</span> 个序列，最小值乘积为 <spanclass="math inline">\(i\)</span> 的方案数。</p><p>复杂度 <span class="math inline">\(O(n \log K \log m)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>, mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n, K, m, g[N], f[<span class="hljs-number">30</span>][N], h[<span class="hljs-number">2</span>][N];<br><span class="hljs-type">int</span> fac[N], inv[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) c=c*a%mod;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>||m&lt;<span class="hljs-number">0</span>||n&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> fac[n]*inv[m]%mod*inv[n-m]%mod;<br>&#125;<br><span class="hljs-keyword">namespace</span> sub1 &#123;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) (ans+=(g[i<span class="hljs-number">-1</span>]-g[i]+mod)%mod)%=mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), K=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>fac[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) fac[i]=fac[i<span class="hljs-number">-1</span>]*i%mod;<br>inv[n]=<span class="hljs-built_in">fp</span>(fac[n],mod<span class="hljs-number">-2</span>);<br><span class="hljs-built_in">per</span>(i,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>) inv[i]=inv[i+<span class="hljs-number">1</span>]*(i+<span class="hljs-number">1</span>)%mod;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,n) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;n-i*k<span class="hljs-number">-1</span>&gt;=i<span class="hljs-number">-1</span>;++i) (g[k]+=<span class="hljs-built_in">C</span>(n-i*k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>))%=mod;<br><span class="hljs-keyword">if</span>(K==<span class="hljs-number">1</span>) &#123;<br>sub1::<span class="hljs-built_in">solve</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) f[<span class="hljs-number">0</span>][i]=(g[i<span class="hljs-number">-1</span>]-g[i]+mod)%mod;<br><br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">29</span>) <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,m) <span class="hljs-keyword">if</span>(f[i<span class="hljs-number">-1</span>][j]) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;j*k&lt;=m;++k) (f[i][j*k]+=f[i<span class="hljs-number">-1</span>][j]*f[i<span class="hljs-number">-1</span>][k]%mod)%=mod;<br>&#125;<br><br><span class="hljs-type">int</span> cur=<span class="hljs-number">1</span>;<br>h[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>) <span class="hljs-keyword">if</span>((K&gt;&gt;i)&amp;<span class="hljs-number">1</span>) &#123;<br>K-=(<span class="hljs-number">1</span>&lt;&lt;i);<br><span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,m) h[cur][j]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,m) <span class="hljs-keyword">if</span>(h[cur^<span class="hljs-number">1</span>][j]) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;j*k&lt;=m;++k) (h[cur][j*k]+=h[cur^<span class="hljs-number">1</span>][j]*f[i][k]%mod)%=mod;<br>&#125;<br>cur^=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) (ans+=h[cur^<span class="hljs-number">1</span>][i])%=mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;p&gt;构造 &lt;span class=&quot;math inline&quot;&gt;&#92;(K&#92;)&lt;/span&gt; 个正整数序列，第 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 个序列为 &lt;span class=&quot;math inline&quot;&gt;&#92;(a_i&#92;)&lt;/span&gt;，长度为 &lt;span class=&quot;math inline&quot;&gt;&#92;(l_i&#92;)&lt;/span&gt;，满足 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;forall i, &#92;sum_{j=1}^{l_i} a_{i,j} =
n&#92;)&lt;/span&gt;，且 &lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;prod_{i=1}^k &#92;min_{j=1}^{l_i} &#92;{a_{i,j}&#92;} &#92;le m
&#92;]&lt;/span&gt; 给定 &lt;span class=&quot;math inline&quot;&gt;&#92;(n,K,m&#92;)&lt;/span&gt;，求构造的方案数，对 &lt;span class=&quot;math inline&quot;&gt;&#92;(998244353&#92;)&lt;/span&gt; 取模。&lt;/p&gt;
&lt;p&gt;两种方案不同，当且仅当存在一个 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt;，满足两种方案的 &lt;span class=&quot;math inline&quot;&gt;&#92;(a_i&#92;)&lt;/span&gt; 不同。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(1 &#92;le n,m &#92;le 10^5&#92;)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;&#92;(1 &#92;le K &#92;le 10^9&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;先考虑一个序列怎么构造。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;&#92;(g(k)&#92;)&lt;/span&gt;
为构造一个序列，满足每个数都大于 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt;
的方案数，有 &lt;span class=&quot;math display&quot;&gt;&#92;[
g(k) = &#92;sum_{i=1}^{n-ik} &#92;binom{n-ik-1}{i-1}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;&#92;(f(i,j)&#92;)&lt;/span&gt; 为已经构造了 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 个序列，当前最小值为 &lt;span class=&quot;math inline&quot;&gt;&#92;(j&#92;)&lt;/span&gt; 的方案数。最小值恰好为 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 的序列数就是 &lt;span class=&quot;math inline&quot;&gt;&#92;(f(1,i) = g(i-1) - g(i)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;转移 &lt;span class=&quot;math display&quot;&gt;&#92;[
f(i,j) &#92;times f(1,k) &#92;rightarrow f(i+1,j &#92;times k)
&#92;]&lt;/span&gt; &lt;span class=&quot;math inline&quot;&gt;&#92;(j &#92;times k &#92;le
m&#92;)&lt;/span&gt;，所以上述 DP 的复杂度是 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(Kn &#92;log
m)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;虽然 &lt;span class=&quot;math inline&quot;&gt;&#92;(K&#92;)&lt;/span&gt;
很大，但是转移很机械，并且有结合律，考虑倍增。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="计数" scheme="https://yozora0908.top/tags/%E8%AE%A1%E6%95%B0/"/>
    
    <category term="DP" scheme="https://yozora0908.top/tags/DP/"/>
    
    <category term="组合数学" scheme="https://yozora0908.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="倍增" scheme="https://yozora0908.top/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>AGC012E Camel and Oases 题解</title>
    <link href="https://yozora0908.top/2023/agc012e-solution/"/>
    <id>https://yozora0908.top/2023/agc012e-solution/</id>
    <published>2023-11-16T01:15:34.000Z</published>
    <updated>2024-01-01T12:31:52.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>任意位置任意时刻，能到达的绿洲一定是一段区间。</p><p>注意到只会跳跃 <span class="math inline">\(O(\log V)\)</span>次。</p><p>设 <span class="math inline">\(L(i,j)\)</span> 为跳跃了 <spanclass="math inline">\(i\)</span> 次，在 <spanclass="math inline">\(j\)</span> 向左出发能走到的最远点，<spanclass="math inline">\(R(i,j)\)</span> 类似。对于一个 <spanclass="math inline">\(i,j\)</span>，区间 <spanclass="math inline">\([L(i,j),R(i,j)]\)</span>中的点都可以无伤互相到达，并且这些区间都是极长的，不妨称每层本质不同的区间为线段。如果我们把按照<span class="math inline">\(i\)</span>递增，从上到下把每个状态的线段分层，可以发现一个很强的性质：不存在低层线段跨越或包含高层线段的情况。</p><p>我们考虑对 <span class="math inline">\(i=0\)</span>时的每一个线段求解。问题可以转化为，对 <spanclass="math inline">\(i&gt;0\)</span>的层，每一层选择一条线段，一部分向左覆盖到 <spanclass="math inline">\(1\)</span>，一部分向右覆盖到 <spanclass="math inline">\(n\)</span>，使得这两块与那条线段拼起来能覆盖 <spanclass="math inline">\(1 \simn\)</span>。由于上面那条很强的性质，所以不会有一个区间既能向左贡献又能向右贡献。</p><p>如何求解呢？注意到层数是 <span class="math inline">\(O(\logV)\)</span> 级别的，设 <span class="math inline">\(f(S)\)</span> 为在<span class="math inline">\(i&gt;0\)</span> 的层选择了 <spanclass="math inline">\(S\)</span> 中的层贡献右端点，从 <spanclass="math inline">\(1\)</span> 开始最远覆盖到的位置，<spanclass="math inline">\(g(S)\)</span>类似。转移时从高层循环到低层，这样能保证是一个拓扑序，原因还是上面那条很强的性质。</p><p>设当前求解的线段为 <spanclass="math inline">\([l,r]\)</span>，只要存在 <spanclass="math inline">\(S\)</span>，使得 <span class="math inline">\(f(S)\ge l-1\)</span> 并且 <span class="math inline">\(g(U \setminus S) \ler+1\)</span>，就能使 <span class="math inline">\([l,r]\)</span>中的每一个点满足条件。</p><p>但这样做的复杂度是 <span class="math inline">\(O(kV)\)</span>的，其中 <span class="math inline">\(k\)</span> 是 <spanclass="math inline">\(i=0\)</span> 层的极长线段长度。</p><p>还是上面那条很强的性质，我们最多选择 <spanclass="math inline">\(O(\log V)\)</span>条线段，并且低层的线段一定全方位小于高层线段，所以如果第一层的线段数量超过层数<spanclass="math inline">\(+1\)</span>，那么所有点都不满足条件。因此复杂度是<span class="math inline">\(O(V \log V)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>, LGN=<span class="hljs-number">19</span>;<br><span class="hljs-type">int</span> n, v, cnt, U, x[N], L[LGN][N], R[LGN][N];<br><span class="hljs-type">int</span> f[<span class="hljs-number">1</span>&lt;&lt;LGN], g[<span class="hljs-number">1</span>&lt;&lt;LGN], ans[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; h;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), v=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) x[i]=<span class="hljs-built_in">read</span>();<br><span class="hljs-type">int</span> t=v;<br><span class="hljs-keyword">do</span> &#123;<br>t&gt;&gt;=<span class="hljs-number">1</span>;<br>h.<span class="hljs-built_in">pb</span>(t);<br>&#125; <span class="hljs-keyword">while</span>(t);<br>U=(<span class="hljs-number">1</span>&lt;&lt;h.<span class="hljs-built_in">size</span>())<span class="hljs-number">-1</span>;<br>cnt=h.<span class="hljs-built_in">size</span>();<br>h.<span class="hljs-built_in">pb</span>(v);<br>    <span class="hljs-comment">// 注意vector的下标，h[cnt]是最高层，h[0]是次高层</span><br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,cnt) &#123;<br><span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,n) &#123;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">1</span>||x[j]-x[j<span class="hljs-number">-1</span>]&gt;h[i]) L[i][j]=j;<br><span class="hljs-keyword">else</span> L[i][j]=L[i][j<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-built_in">per</span>(j,n,<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(j==n||x[j+<span class="hljs-number">1</span>]-x[j]&gt;h[i]) R[i][j]=j;<br><span class="hljs-keyword">else</span> R[i][j]=R[i][j+<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><span class="hljs-built_in">rep</span>(S,<span class="hljs-number">0</span>,U) &#123;<br>g[S]=n+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,cnt<span class="hljs-number">-1</span>) <span class="hljs-keyword">if</span>((S&gt;&gt;i)&amp;<span class="hljs-number">1</span>) &#123;<br>f[S]=<span class="hljs-built_in">max</span>(f[S],R[i][f[S^(<span class="hljs-number">1</span>&lt;&lt;i)]+<span class="hljs-number">1</span>]);<br>g[S]=<span class="hljs-built_in">min</span>(g[S],L[i][g[S^(<span class="hljs-number">1</span>&lt;&lt;i)]<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br>vector&lt;PII &gt; seg;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(L[cnt][i]==i) &#123;<br>        <span class="hljs-comment">// 无法再扩展，说明这是线段的端点</span><br>seg.<span class="hljs-built_in">pb</span>(&#123;L[cnt][i],R[cnt][i]&#125;);<br>&#125;<br><span class="hljs-keyword">if</span>(seg.<span class="hljs-built_in">size</span>()&gt;cnt+<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impossible&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:seg) &#123;<br><span class="hljs-built_in">rep</span>(S,<span class="hljs-number">0</span>,U) &#123;<br><span class="hljs-type">int</span> T=U^S;<br><span class="hljs-keyword">if</span>(f[S]&gt;=t.fi<span class="hljs-number">-1</span>&amp;&amp;g[T]&lt;=t.se+<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">rep</span>(i,t.fi,t.se) ans[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(ans[i]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Possible&quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impossible&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;任意位置任意时刻，能到达的绿洲一定是一段区间。&lt;/p&gt;
&lt;p&gt;注意到只会跳跃 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(&#92;log V)&#92;)&lt;/span&gt;
次。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;&#92;(L(i,j)&#92;)&lt;/span&gt; 为跳跃了 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 次，在 &lt;span class=&quot;math inline&quot;&gt;&#92;(j&#92;)&lt;/span&gt; 向左出发能走到的最远点，&lt;span class=&quot;math inline&quot;&gt;&#92;(R(i,j)&#92;)&lt;/span&gt; 类似。对于一个 &lt;span class=&quot;math inline&quot;&gt;&#92;(i,j&#92;)&lt;/span&gt;，区间 &lt;span class=&quot;math inline&quot;&gt;&#92;([L(i,j),R(i,j)]&#92;)&lt;/span&gt;
中的点都可以无伤互相到达，并且这些区间都是极长的，不妨称每层本质不同的区间为线段。如果我们把按照
&lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt;
递增，从上到下把每个状态的线段分层，可以发现一个很强的性质：不存在低层线段跨越或包含高层线段的情况。&lt;/p&gt;
&lt;p&gt;我们考虑对 &lt;span class=&quot;math inline&quot;&gt;&#92;(i=0&#92;)&lt;/span&gt;
时的每一个线段求解。问题可以转化为，对 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&amp;gt;0&#92;)&lt;/span&gt;
的层，每一层选择一条线段，一部分向左覆盖到 &lt;span class=&quot;math inline&quot;&gt;&#92;(1&#92;)&lt;/span&gt;，一部分向右覆盖到 &lt;span class=&quot;math inline&quot;&gt;&#92;(n&#92;)&lt;/span&gt;，使得这两块与那条线段拼起来能覆盖 &lt;span class=&quot;math inline&quot;&gt;&#92;(1 &#92;sim
n&#92;)&lt;/span&gt;。由于上面那条很强的性质，所以不会有一个区间既能向左贡献又能向右贡献。&lt;/p&gt;
&lt;p&gt;如何求解呢？注意到层数是 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(&#92;log
V)&#92;)&lt;/span&gt; 级别的，设 &lt;span class=&quot;math inline&quot;&gt;&#92;(f(S)&#92;)&lt;/span&gt; 为在
&lt;span class=&quot;math inline&quot;&gt;&#92;(i&amp;gt;0&#92;)&lt;/span&gt; 的层选择了 &lt;span class=&quot;math inline&quot;&gt;&#92;(S&#92;)&lt;/span&gt; 中的层贡献右端点，从 &lt;span class=&quot;math inline&quot;&gt;&#92;(1&#92;)&lt;/span&gt; 开始最远覆盖到的位置，&lt;span class=&quot;math inline&quot;&gt;&#92;(g(S)&#92;)&lt;/span&gt;
类似。转移时从高层循环到低层，这样能保证是一个拓扑序，原因还是上面那条很强的性质。&lt;/p&gt;
&lt;p&gt;设当前求解的线段为 &lt;span class=&quot;math inline&quot;&gt;&#92;([l,r]&#92;)&lt;/span&gt;，只要存在 &lt;span class=&quot;math inline&quot;&gt;&#92;(S&#92;)&lt;/span&gt;，使得 &lt;span class=&quot;math inline&quot;&gt;&#92;(f(S)
&#92;ge l-1&#92;)&lt;/span&gt; 并且 &lt;span class=&quot;math inline&quot;&gt;&#92;(g(U &#92;setminus S) &#92;le
r+1&#92;)&lt;/span&gt;，就能使 &lt;span class=&quot;math inline&quot;&gt;&#92;([l,r]&#92;)&lt;/span&gt;
中的每一个点满足条件。&lt;/p&gt;
&lt;p&gt;但这样做的复杂度是 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(kV)&#92;)&lt;/span&gt;
的，其中 &lt;span class=&quot;math inline&quot;&gt;&#92;(k&#92;)&lt;/span&gt; 是 &lt;span class=&quot;math inline&quot;&gt;&#92;(i=0&#92;)&lt;/span&gt; 层的极长线段长度。&lt;/p&gt;
&lt;p&gt;还是上面那条很强的性质，我们最多选择 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(&#92;log V)&#92;)&lt;/span&gt;
条线段，并且低层的线段一定全方位小于高层线段，所以如果第一层的线段数量超过层数
&lt;span class=&quot;math inline&quot;&gt;&#92;(+1&#92;)&lt;/span&gt;，那么所有点都不满足条件。因此复杂度是
&lt;span class=&quot;math inline&quot;&gt;&#92;(O(V &#92;log V)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ll long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N=&lt;span class=&quot;hljs-number&quot;&gt;2e5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, LGN=&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, v, cnt, U, x[N], L[LGN][N], R[LGN][N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; f[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;LGN], g[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;LGN], ans[N];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; h;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), v=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) x[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; t=v;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;br&gt;		t&amp;gt;&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;		h.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(t);&lt;br&gt;	&amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(t);&lt;br&gt;	U=(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;h.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;	cnt=h.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();&lt;br&gt;	h.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(v);&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 注意vector的下标，h[cnt]是最高层，h[0]是次高层&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,cnt) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(j,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;||x[j]-x[j&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]&amp;gt;h[i]) L[i][j]=j;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; L[i][j]=L[i][j&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;];&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;per&lt;/span&gt;(j,n,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j==n||x[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]-x[j]&amp;gt;h[i]) R[i][j]=j;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; R[i][j]=R[i][j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(S,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,U) &amp;#123;&lt;br&gt;		g[S]=n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,cnt&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((S&amp;gt;&amp;gt;i)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;			f[S]=&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(f[S],R[i][f[S^(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);&lt;br&gt;			g[S]=&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(g[S],L[i][g[S^(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)]&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]);&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	vector&amp;lt;PII &amp;gt; seg;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(L[cnt][i]==i) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// 无法再扩展，说明这是线段的端点&lt;/span&gt;&lt;br&gt;		seg.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(&amp;#123;L[cnt][i],R[cnt][i]&amp;#125;);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(seg.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()&amp;gt;cnt+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Impossible&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; t:seg) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(S,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,U) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; T=U^S;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(f[S]&amp;gt;=t.fi&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;&amp;amp;&amp;amp;g[T]&amp;lt;=t.se+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;br&gt;				&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,t.fi,t.se) ans[i]=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;				&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;&lt;br&gt;			&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(ans[i]) &lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Possible&amp;quot;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Impossible&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="DP" scheme="https://yozora0908.top/tags/DP/"/>
    
    <category term="状态压缩" scheme="https://yozora0908.top/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>ABC328F Good Set Query 题解</title>
    <link href="https://yozora0908.top/2023/abc328f-solution/"/>
    <id>https://yozora0908.top/2023/abc328f-solution/</id>
    <published>2023-11-16T00:36:23.000Z</published>
    <updated>2024-01-20T09:58:40.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>使用带权并查集维护这个关系。</p><p>具体的，设 <span class="math inline">\(d_x\)</span>为并查集上每个节点到其父亲的边权，表示 <span class="math inline">\(X_x -d_x = X_{fa_x}\)</span>。</p><p>合并两个点 <span class="math inline">\((x,y)\)</span> 所在集合时，设<span class="math inline">\(rx\)</span> 为 <spanclass="math inline">\(x\)</span> 所在集合的根，<spanclass="math inline">\(ry\)</span> 类似。对于 <spanclass="math inline">\(X_{x} - X_{y} = z\)</span>，我们将 <spanclass="math inline">\(rx\)</span> 合并到 <spanclass="math inline">\(ry\)</span> 上，从而只需要考虑 <spanclass="math inline">\(rx\)</span> 的连边。需要满足 <spanclass="math inline">\(d_x + d_{rx} - d_y = z\)</span>，从而 <spanclass="math inline">\(d_{rx} = z - d_x + d_y\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, q, a[N], b[N], c[N];<br><span class="hljs-type">int</span> fa[N], d[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; ans; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br><span class="hljs-type">int</span> rt=<span class="hljs-built_in">get</span>(fa[x]);<br>d[x]+=d[fa[x]];<br><span class="hljs-keyword">return</span> fa[x]=rt;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), q=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,q) a[i]=<span class="hljs-built_in">read</span>(), b[i]=<span class="hljs-built_in">read</span>(), c[i]=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) fa[i]=i, d[i]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,q) &#123;<br><span class="hljs-type">int</span> x=a[i], y=b[i], z=c[i];<br><span class="hljs-type">int</span> fx=<span class="hljs-built_in">get</span>(x), fy=<span class="hljs-built_in">get</span>(y);<br><span class="hljs-keyword">if</span>(fx!=fy||(fx==fy&amp;&amp;d[x]-d[y]==z)) &#123;<br>ans.<span class="hljs-built_in">pb</span>(i);<br>fa[fx]=fy;<br>d[fx]=z+d[y]-d[x];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,x);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;使用带权并查集维护这个关系。&lt;/p&gt;
&lt;p&gt;具体的，设 &lt;span class=&quot;math inline&quot;&gt;&#92;(d_x&#92;)&lt;/span&gt;
为并查集上每个节点到其父亲的边权，表示 &lt;span class=&quot;</summary>
      
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="并查集" scheme="https://yozora0908.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>CF1253F Cheap Robot 题解</title>
    <link href="https://yozora0908.top/2023/cf1253f-solution/"/>
    <id>https://yozora0908.top/2023/cf1253f-solution/</id>
    <published>2023-11-16T00:30:13.000Z</published>
    <updated>2024-01-01T12:26:58.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>因为保证 <span class="math inline">\(a,b\)</span>都是关键点，并且不关心从 <span class="math inline">\(a\)</span> 到 <spanclass="math inline">\(b\)</span>是怎么走的，所以我们的最优策略就是每走到一个节点，就去离它最近的关键点充电，然后再走回来，这样相对于其他策略，走到同一个点的电量可能更多而不可能更少。</p><p>我们处理出 <span class="math inline">\(d_x\)</span> 表示 <spanclass="math inline">\(x\)</span> 到最近的关键点的距离，设当前电量上限为<span class="math inline">\(C\)</span>，那么 <spanclass="math inline">\((x,y,z)\)</span> 这条边可以通过，当且仅当 <spanclass="math inline">\(C - d_x - z \ge d_y\)</span>，也就是 <spanclass="math inline">\(C \ge d_x + d_y+z\)</span>。建立超级源点，向所有关键点连权值为 <spanclass="math inline">\(0\)</span> 的边，然后跑单源最短路，到 <spanclass="math inline">\(x\)</span> 的最短距离就是 <spanclass="math inline">\(d_x\)</span>。</p><p>因此电量 <span class="math inline">\(c\)</span> 能从 <spanclass="math inline">\(a\)</span> 能走到 <spanclass="math inline">\(b\)</span>，当且仅当加入所有满足 <spanclass="math inline">\(c \ge d_x+d_y+z\)</span> 的边后，<spanclass="math inline">\(a,b\)</span> 连通。</p><p>在线做比较繁琐，考虑离线处理。</p><p>我们按照权值从小到大枚举每一条边 <spanclass="math inline">\((x,y,z)\)</span>，令 <spanclass="math inline">\(c=z\)</span>并在图中加入这条边，用并查集维护连通块。如果存在一个询问 <spanclass="math inline">\((a,b)\)</span> 因此而联通，那么 <spanclass="math inline">\(z\)</span> 就是其答案。</p><p>我们把询问 <span class="math inline">\((a,b)\)</span> 挂到 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span>上，合并两个连通块时按秩合并，回答较小集合内的询问即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>, M=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>, inf=<span class="hljs-number">0x0f0f0f0f0f0f0f0f</span>;<br><span class="hljs-type">int</span> n, m, k, Q, d[N], ans[M];<br><span class="hljs-type">bool</span> v[N];<br>vector&lt;PII &gt; p[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span> &#123;<br><span class="hljs-type">int</span> x, y, z;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> edge&amp; b) <span class="hljs-type">const</span> &#123;<br><span class="hljs-keyword">return</span> z&lt;b.z;<br>&#125;<br>&#125; e[M];<br><span class="hljs-type">int</span> fa[N], sz[N];<br>vector&lt;edge&gt; vec[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">get</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>priority_queue&lt;PII &gt; q;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) d[i]=inf;<br>d[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">top</span>().se; q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(v[x]) <span class="hljs-keyword">continue</span>;<br>v[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:p[x]) &#123;<br><span class="hljs-type">int</span> y=t.fi, z=t.se;<br><span class="hljs-keyword">if</span>(d[y]&gt;d[x]+z) &#123;<br>d[y]=d[x]+z;<br>q.<span class="hljs-built_in">push</span>(&#123;-d[y],y&#125;);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>(), Q=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>e[i].x=<span class="hljs-built_in">read</span>(), e[i].y=<span class="hljs-built_in">read</span>(), e[i].z=<span class="hljs-built_in">read</span>();<br>p[e[i].x].<span class="hljs-built_in">pb</span>(&#123;e[i].y,e[i].z&#125;), p[e[i].y].<span class="hljs-built_in">pb</span>(&#123;e[i].x,e[i].z&#125;);<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,k) p[<span class="hljs-number">0</span>].<span class="hljs-built_in">pb</span>(&#123;i,<span class="hljs-number">0</span>&#125;), p[i].<span class="hljs-built_in">pb</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br><span class="hljs-built_in">dijkstra</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) e[i].z+=d[e[i].x]+d[e[i].y];<br><span class="hljs-built_in">sort</span>(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) fa[i]=i, sz[i]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,Q) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br>edge t;<br>t.x=x, t.y=y, t.z=i;<br>vec[x].<span class="hljs-built_in">pb</span>(t), vec[y].<span class="hljs-built_in">pb</span>(t);<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br><span class="hljs-type">int</span> x=e[i].x, y=e[i].y, z=e[i].z;<br>x=<span class="hljs-built_in">get</span>(x), y=<span class="hljs-built_in">get</span>(y);<br><span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(sz[x]&lt;sz[y]) <span class="hljs-built_in">swap</span>(x,y);<br>sz[x]+=sz[y];<br>fa[y]=x;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:vec[y]) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(t.x)==<span class="hljs-built_in">get</span>(t.y)) &#123;<br><span class="hljs-keyword">if</span>(!ans[t.z]) ans[t.z]=z;<br>&#125; <span class="hljs-keyword">else</span> vec[x].<span class="hljs-built_in">pb</span>(t);<br>&#125;<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,Q) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;因为保证 &lt;span class=&quot;math inline&quot;&gt;&#92;(a,b&#92;)&lt;/span&gt;
都是关键点，并且不关心从 &lt;span class=&quot;math inline&quot;&gt;&#92;(a&#92;)&lt;/span&gt; 到 &lt;sp</summary>
      
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="图论" scheme="https://yozora0908.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="并查集" scheme="https://yozora0908.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="最短路" scheme="https://yozora0908.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>CF607D Power Tree 题解</title>
    <link href="https://yozora0908.top/2023/cf607d-solution/"/>
    <id>https://yozora0908.top/2023/cf607d-solution/</id>
    <published>2023-11-16T00:04:07.000Z</published>
    <updated>2024-01-01T12:25:43.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>考虑 <span class="math inline">\(f(x)\)</span> 的实际意义。</p><p>写出来就是 <span class="math display">\[f(x) = \sum_{y \in \text{subtree}(x)} w_y \prod_{z \in (x \rightarrowy)} sz_z\]</span> 容易想到把 <span class="math inline">\((x \rightarrowy)\)</span> 这条链差分掉，由于模数是 <spanclass="math inline">\(10^9+7\)</span> 所以存在乘法逆元，那么 <spanclass="math display">\[f(x) = \sum_{y \in \text{subtree}(x)} w_y \frac{\prod_{z \in (1\rightarrow y)}sz_z}{\prod_{z \in (1 \rightarrow fa_x)}sz_z}\]</span> 设 <span class="math inline">\(pre_x = \prod_{y \in (1\rightarrow x)} sz_y\)</span>，得到 <span class="math display">\[f(x) = \frac{1}{pre_{fa_x}} \sum_{y \in \text{subtree}(x)} w_y  \timespre_{y}\]</span> 这个是容易计算的。</p><p>我们先把树建立起来，然后把点拍到 <spanclass="math inline">\(\text{DFS}\)</span> 序上，线段树维护子树信息。</p><p>具体的，当 <span class="math inline">\(sz_x\)</span> 改变后，<spanclass="math inline">\(\text{subtree}(x)\)</span> 中的点乘上 <spanclass="math inline">\(\frac{sz_x+1}{sz_x}\)</span>。但是此时有可能有点还没有被建立起来，所以我们要额外维护<span class="math inline">\(\sum_{y \in \text{subtree}(x)} w_y \timespre_y\)</span>。对于 <span class="math inline">\(pre_x\)</span>的更新，我们直接打标记，同时线段树的叶子节点 <spanclass="math inline">\(dfn_x\)</span> 的标记值就等于 <spanclass="math inline">\(pre_x\)</span>；对于节点 <spanclass="math inline">\(x\)</span>的建立，我们直接递归到叶子节点上令其权值为 <spanclass="math inline">\(w_x\)</span> 乘此时的 <spanclass="math inline">\(pre\)</span>标记值，然后<code>pushup</code>对其求和即可。</p><p>对于询问，直接查询 <span class="math inline">\(x\)</span>的子树和并求 <span class="math inline">\(pre_{fa_x}\)</span>的逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>, mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, q, w[N], rsz[N];<br><span class="hljs-type">int</span> num, dfn[N], sz[N], fa[N];<br><span class="hljs-type">int</span> node[N], op[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) c=c*a%mod;<br>&#125;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fat)</span> </span>&#123;<br>fa[x]=fat;<br>sz[x]=<span class="hljs-number">1</span>;<br>dfn[x]=++num;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) <span class="hljs-keyword">if</span>(y!=fat) &#123;<br><span class="hljs-built_in">dfs</span>(y,x);<br>sz[x]+=sz[y];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> t[N&lt;&lt;<span class="hljs-number">2</span>], tag[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; t[x]=(t[x&lt;&lt;<span class="hljs-number">1</span>]+t[x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>])%mod; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maketag</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> d)</span> </span>&#123;<br>(t[x]*=d)%=mod;<br>(tag[x]*=d)%=mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(tag[x]!=<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>,tag[x]);<br><span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,tag[x]);<br>tag[x]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>tag[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-built_in">build</span>(x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mdf</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(l==r) &#123;<br>t[x]=d*tag[x]%mod;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(p&lt;=mid) <span class="hljs-built_in">mdf</span>(p,d,x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">mdf</span>(p,d,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;<br><span class="hljs-built_in">maketag</span>(x,d);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(L&lt;=mid) <span class="hljs-built_in">upd</span>(L,R,d,x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br><span class="hljs-keyword">if</span>(R&gt;mid) <span class="hljs-built_in">upd</span>(L,R,d,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> op,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123;<br><span class="hljs-keyword">if</span>(op) <span class="hljs-keyword">return</span> t[x];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> tag[x];<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>, res=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushdown</span>(x);<br><span class="hljs-keyword">if</span>(L&lt;=mid) (res+=<span class="hljs-built_in">query</span>(L,R,op,x&lt;&lt;<span class="hljs-number">1</span>,l,mid))%=mod;<br><span class="hljs-keyword">if</span>(R&gt;mid) (res+=<span class="hljs-built_in">query</span>(L,R,op,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r))%=mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-number">1</span>;<br>w[<span class="hljs-number">1</span>]=<span class="hljs-built_in">read</span>(), q=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,q) &#123;<br>op[i]=<span class="hljs-built_in">read</span>(), node[i]=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span>(op[i]&amp;<span class="hljs-number">1</span>) &#123;<br>++n;<br>w[n]=<span class="hljs-built_in">read</span>();<br>p[node[i]].<span class="hljs-built_in">pb</span>(n);<br>node[i]=n;<br>&#125;<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">build</span>();<br><span class="hljs-built_in">mdf</span>(dfn[<span class="hljs-number">1</span>],w[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) rsz[i]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,q) &#123;<br><span class="hljs-type">int</span> x=node[i];<br><span class="hljs-keyword">if</span>(op[i]&amp;<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> val=(rsz[fa[x]]+<span class="hljs-number">1</span>)*<span class="hljs-built_in">fp</span>(rsz[fa[x]],mod<span class="hljs-number">-2</span>)%mod;<br>++rsz[fa[x]];<br><span class="hljs-built_in">upd</span>(dfn[fa[x]],dfn[fa[x]]+sz[fa[x]]<span class="hljs-number">-1</span>,val);<br><span class="hljs-built_in">mdf</span>(dfn[x],w[x]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-built_in">query</span>(dfn[x],dfn[x]+sz[x]<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> inv=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x!=<span class="hljs-number">1</span>) inv=<span class="hljs-built_in">query</span>(dfn[fa[x]],dfn[fa[x]],<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans*<span class="hljs-built_in">fp</span>(inv,mod<span class="hljs-number">-2</span>)%mod);<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;考虑 &lt;span class=&quot;math inline&quot;&gt;&#92;(f(x)&#92;)&lt;/span&gt; 的实际意义。&lt;/p&gt;
&lt;p&gt;写出来就是 &lt;span class=&quot;math display&quot;&gt;&#92;[
f(x) = </summary>
      
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://yozora0908.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="树论" scheme="https://yozora0908.top/tags/%E6%A0%91%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「NOIP Record」#24 数位DP急救</title>
    <link href="https://yozora0908.top/2023/noip-record-24/"/>
    <id>https://yozora0908.top/2023/noip-record-24/</id>
    <published>2023-11-15T23:27:20.000Z</published>
    <updated>2024-01-01T12:24:23.560Z</updated>
    
    <content type="html"><![CDATA[<p>因为时间紧迫所以忽略所有时间复杂度的计算。</p><h2 id="luogu2657-scoi2009-windy-数">luogu2657 [SCOI2009] windy 数</h2><p>板子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-type">int</span> f[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dim;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> lim,<span class="hljs-type">int</span> lead)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(~f[i][pre][lim][lead]) <span class="hljs-keyword">return</span> f[i][pre][lim][lead];<br><span class="hljs-type">int</span>&amp; res=f[i][pre][lim][lead];<br><span class="hljs-type">int</span> up=lim? dim[i]:<span class="hljs-number">9</span>;<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) &#123;<br><span class="hljs-keyword">if</span>(lead) &#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>) res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,lim&amp;&amp;(k==up),<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,k,lim&amp;&amp;(k==up),<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(k-pre)&gt;=<span class="hljs-number">2</span>) res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,k,lim&amp;&amp;(k==up),<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>dim.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(x) &#123;<br>dim.<span class="hljs-built_in">pb</span>(x%<span class="hljs-number">10</span>);<br>x/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> cnt=dim.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(cnt<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>a=<span class="hljs-built_in">read</span>(), b=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">calc</span>(b)-<span class="hljs-built_in">calc</span>(a<span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu4317-花神的数论题">luogu4317 花神的数论题</h2><p>对于每个 <span class="math inline">\(i\)</span>都算一遍，然后快速幂解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e7</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, m, tar, cnt[<span class="hljs-number">55</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">55</span>][<span class="hljs-number">2</span>][<span class="hljs-number">55</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; bit;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) c=c*a%mod;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> lim,<span class="hljs-type">int</span> c)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> (c==tar);<br><span class="hljs-keyword">if</span>(~f[i][lim][c]) <span class="hljs-keyword">return</span> f[i][lim][c];<br><span class="hljs-type">int</span>&amp; res=f[i][lim][c];<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up=lim? bit[i<span class="hljs-number">-1</span>]:<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,lim&amp;&amp;k==up,c+k);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>();<br><span class="hljs-type">int</span> t=n;<br><span class="hljs-keyword">while</span>(t) &#123;<br>bit.<span class="hljs-built_in">pb</span>(t&amp;<span class="hljs-number">1</span>);<br>t&gt;&gt;=<span class="hljs-number">1</span>;<br>&#125;<br>m=bit.<span class="hljs-built_in">size</span>();<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) &#123;<br>tar=i;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br>cnt[i]=<span class="hljs-built_in">dfs</span>(m,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) (ans*=<span class="hljs-built_in">fp</span>(i,cnt[i]))%=mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu2602-zjoi2010-数字计数">luogu2602 [ZJOI2010] 数字计数</h2><p>对每种数字算一遍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">int</span> a, b, d;<br><span class="hljs-type">int</span> f[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dim;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> lim,<span class="hljs-type">int</span> lead)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> c;<br><span class="hljs-keyword">if</span>(~f[i][c][lim][lead]) <span class="hljs-keyword">return</span> f[i][c][lim][lead];<br><span class="hljs-type">int</span>&amp; res=f[i][c][lim][lead];<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up=lim? dim[i]:<span class="hljs-number">9</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) &#123;<br><span class="hljs-keyword">if</span>(lead&amp;&amp;k==<span class="hljs-number">0</span>) res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,c,lim&amp;&amp;(k==up),<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,c+(k==d),lim&amp;&amp;(k==up),<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> t=n;<br>dim.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(t) &#123;<br>dim.<span class="hljs-built_in">pb</span>(t%<span class="hljs-number">10</span>);<br>t/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-type">int</span> cnt=dim.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(cnt<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>a=<span class="hljs-built_in">read</span>(), b=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>) &#123;<br>d=i; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,<span class="hljs-built_in">calc</span>(b)-<span class="hljs-built_in">calc</span>(a<span class="hljs-number">-1</span>));<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu4127-ahoi2009-同类分布">luogu4127 [AHOI2009] 同类分布</h2><p>枚举各位数字之和，然后 DP 求模这个值为 <spanclass="math inline">\(0\)</span> 的个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">int</span> a, b, mod;<br><span class="hljs-type">int</span> f[<span class="hljs-number">20</span>][<span class="hljs-number">180</span>][<span class="hljs-number">180</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dim;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> lim)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> sum==mod&amp;&amp;d==<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(~f[i][sum][d][lim]) <span class="hljs-keyword">return</span> f[i][sum][d][lim];<br><span class="hljs-type">int</span>&amp; res=f[i][sum][d][lim];<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up=lim? dim[i]:<span class="hljs-number">9</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) &#123;<br>res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum+k,(<span class="hljs-number">10</span>*d+k)%mod,lim&amp;&amp;(k==up));<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>dim.<span class="hljs-built_in">clear</span>();<br><span class="hljs-type">int</span> t=n;<br><span class="hljs-keyword">while</span>(t) &#123;<br>dim.<span class="hljs-built_in">pb</span>(t%<span class="hljs-number">10</span>);<br>t/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(mod=<span class="hljs-number">1</span>;mod&lt;=dim.<span class="hljs-built_in">size</span>()*<span class="hljs-number">9</span>;++mod) &#123;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> cnt=dim.<span class="hljs-built_in">size</span>();<br>res+=<span class="hljs-built_in">dfs</span>(cnt<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>a=<span class="hljs-built_in">read</span>(), b=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">calc</span>(b)-<span class="hljs-built_in">calc</span>(a<span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="cf55d-beautiful-numbers">CF55D Beautiful numbers</h2><p><span class="math display">\[\forall i, A \bmod m_i = A \bmod \text{lcm}_{i=1}^{n} \{m_i\}\]</span></p><p>所以我们状压当前数出现了哪些数字以及其对 <spanclass="math inline">\(\text{lcm}_{i=1}^9 \{i\}=2520\)</span>取模的结果即可。</p><p>内存开不下，多次清空数组效率太低。</p><p>不记忆化顶了上界的情况，这样空间足够且数组得以复用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">2520</span>;<br><span class="hljs-type">int</span> T, a, b;<br><span class="hljs-type">int</span> f[<span class="hljs-number">19</span>][<span class="hljs-number">512</span>][<span class="hljs-number">2521</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dig;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> S,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> lim)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>) <span class="hljs-keyword">if</span>((S&gt;&gt;k)&amp;<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(d%(k+<span class="hljs-number">2</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(!lim&amp;&amp;~f[i][S][d]) <span class="hljs-keyword">return</span> f[i][S][d];<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up=lim? dig[i]:<span class="hljs-number">9</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) &#123;<br><span class="hljs-keyword">if</span>(k&lt;=<span class="hljs-number">1</span>) res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,S,(d*<span class="hljs-number">10</span>+k)%mod,lim&amp;&amp;(k==up));<br><span class="hljs-keyword">else</span> res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,S|(<span class="hljs-number">1</span>&lt;&lt;(k<span class="hljs-number">-2</span>)),(d*<span class="hljs-number">10</span>+k)%mod,lim&amp;&amp;(k==up));<br>&#125;<br><span class="hljs-keyword">if</span>(!lim) <span class="hljs-keyword">return</span> f[i][S][d]=res;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>dig.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(n) &#123;<br>dig.<span class="hljs-built_in">pb</span>(n%<span class="hljs-number">10</span>);<br>n/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-type">int</span> m=dig.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>a=<span class="hljs-built_in">read</span>(), b=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">calc</span>(b)-<span class="hljs-built_in">calc</span>(a<span class="hljs-number">-1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="cf1073e-segment-sum">CF1073E Segment Sum</h2><p>状压存在的数字集合，然后一个记录个数一个记录和，随便转移。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> U=<span class="hljs-number">1030</span>, mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> l, r, m, popcount[U], pw[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">20</span>][U][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], g[<span class="hljs-number">19</span>][U][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dig;<br><span class="hljs-function">PII <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> S,<span class="hljs-type">int</span> lim,<span class="hljs-type">int</span> lead)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">MP</span>(popcount[S]&lt;=m,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(~f[i][S][lim][lead]) <span class="hljs-keyword">return</span> <span class="hljs-built_in">MP</span>(f[i][S][lim][lead],g[i][S][lim][lead]);<br><span class="hljs-type">int</span> r1=<span class="hljs-number">0</span>, r2=<span class="hljs-number">0</span>, up=lim? dig[i]:<span class="hljs-number">9</span>;<br><span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up) &#123;<br><span class="hljs-type">int</span> T=S;<br><span class="hljs-keyword">if</span>(!(lead&amp;&amp;k==<span class="hljs-number">0</span>)) T=S|(<span class="hljs-number">1</span>&lt;&lt;k);<br>PII t=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,T,lim&amp;&amp;k==up,lead&amp;&amp;k==<span class="hljs-number">0</span>);<br>(r1+=t.fi)%=mod;<br>(r2+=((t.fi*k%mod*pw[i]%mod+t.se)%mod)%mod)%=mod;<br>&#125;<br>f[i][S][lim][lead]=r1;<br>g[i][S][lim][lead]=r2;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">MP</span>(r1,r2);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>dig.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(n) &#123;<br>dig.<span class="hljs-built_in">pb</span>(n%<span class="hljs-number">10</span>);<br>n/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> m=dig.<span class="hljs-built_in">size</span>();<br>PII res=<span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> res.se;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>l=<span class="hljs-built_in">read</span>(), r=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>pw[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(S,<span class="hljs-number">1</span>,<span class="hljs-number">1023</span>) popcount[S]=popcount[S&gt;&gt;<span class="hljs-number">1</span>]+(S&amp;<span class="hljs-number">1</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">18</span>) pw[i]=pw[i<span class="hljs-number">-1</span>]*<span class="hljs-number">10</span>%mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,(<span class="hljs-built_in">calc</span>(r)-<span class="hljs-built_in">calc</span>(l<span class="hljs-number">-1</span>)+mod)%mod); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu6669-清华集训2016-组合数问题">luogu6669 [清华集训2016]组合数问题</h2><p>考虑 Lucas 定理。 <span class="math display">\[\binom{n}{m} \equiv \binom{\lfloor n/p \rfloor}{\lfloor m/p \rfloor}\binom{n \bmod p}{m \bmod p} \pmod {p}\]</span> 如果存在 <span class="math inline">\(k \mid\binom{n}{m}\)</span>，由于 <span class="math inline">\(k\)</span>是质数，所以后面那一坨在模 <span class="math inline">\(k\)</span>意义下等于 <span class="math inline">\(0\)</span>。</p><p>这个式子还有另一个意义，设 <spanclass="math inline">\(t_i(n)\)</span> 为 <spanclass="math inline">\(k\)</span> 进制下 <spanclass="math inline">\(n\)</span> 的第 <spanclass="math inline">\(i\)</span> 位，那么 <span class="math display">\[\binom{n}{m} \equiv \prod_i \binom{t_i(n)}{t_i(m)} \pmod{k}\]</span> 右式等于 <spanclass="math inline">\(0\)</span>，当且仅当存在一个 <spanclass="math inline">\(t_i(n) &lt; t_i(m)\)</span>。</p><p>求不合法方案显然更容易，所以问题转化为求范围内有多少对 <spanclass="math inline">\(k\)</span> 进制数 <spanclass="math inline">\(i,j\)</span>，满足 <spanclass="math inline">\(i\)</span> 的每一位都大于等于 <spanclass="math inline">\(j\)</span>。</p><p>数位 DP 容易解决。</p><p>令 <span class="math inline">\(m = \min(n,m)\)</span>，那么总方案数是<span class="math display">\[\frac{(m+1)(m+2)}{2} + (n-m)(m-1)\]</span> 做减法即可。</p><p>注意 <span class="math inline">\(n,m\)</span>很大，需要随时取模。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>, inv2=<span class="hljs-number">500000004</span>;<br><span class="hljs-type">int</span> T, k, n, m;<br><span class="hljs-type">int</span> f[<span class="hljs-number">70</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dig1, dig2;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> lim1,<span class="hljs-type">int</span> lim2)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(~f[i][lim1][lim2]) <span class="hljs-keyword">return</span> f[i][lim1][lim2];<br><span class="hljs-type">int</span>&amp; res=f[i][lim1][lim2];<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up1=lim1? dig1[i]:k<span class="hljs-number">-1</span>, up2=lim2? dig2[i]:k<span class="hljs-number">-1</span>;<br><span class="hljs-built_in">rep</span>(j1,<span class="hljs-number">0</span>,up1) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j2=<span class="hljs-number">0</span>;j2&lt;=<span class="hljs-built_in">min</span>(up2,j1);++j2) &#123;<br>(res+=<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,lim1&amp;&amp;j1==up1,lim2&amp;&amp;j2==up2))%=mod;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br>dig1.<span class="hljs-built_in">clear</span>();<br>dig2.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(n) &#123;<br>dig1.<span class="hljs-built_in">pb</span>(n%k);<br>n/=k;<br>&#125;<br><span class="hljs-keyword">while</span>(m) &#123;<br>dig2.<span class="hljs-built_in">pb</span>(m%k);<br>m/=k;<br>&#125;<br><span class="hljs-keyword">while</span>(dig2.<span class="hljs-built_in">size</span>()&lt;dig1.<span class="hljs-built_in">size</span>()) dig2.<span class="hljs-built_in">pb</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> cnt=dig1.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(cnt<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>m=<span class="hljs-built_in">min</span>(n,m);<br><span class="hljs-type">int</span> all=((m+<span class="hljs-number">1</span>)%mod)*((m+<span class="hljs-number">2</span>)%mod)%mod*inv2%mod;<br>(all+=((n%mod-m%mod+mod)%mod)*((m+<span class="hljs-number">1</span>)%mod)%mod)%=mod;<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,(all-<span class="hljs-built_in">calc</span>(n,m)+mod)%mod);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu9821-icpc2020-shanghai-r-sum-of-log">luogu9821 [ICPC2020Shanghai R] Sum of Log</h2><p>由于 <span class="math inline">\(i \text{ and } j =0\)</span>，所以<span class="math inline">\(i+j\)</span> 的运算中就不会有进位，所以<span class="math inline">\(\lfloor \log_2(i+j)+1 \rfloor\)</span>就等于 <span class="math inline">\(i,j\)</span> 中最高位的 <spanclass="math inline">\(1\)</span> 所在的位数 <spanclass="math inline">\(+1\)</span>。</p><p>数位 DP 可以解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> T, n, m;<br><span class="hljs-type">int</span> f[<span class="hljs-number">32</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; dig1, dig2;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> lim1,<span class="hljs-type">int</span> lim2,<span class="hljs-type">int</span> lead)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(~f[i][lim1][lim2][lead]) <span class="hljs-keyword">return</span> f[i][lim1][lim2][lead];<br><span class="hljs-type">int</span>&amp; res=f[i][lim1][lim2][lead];<br>res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> up1=lim1? dig1[i]:<span class="hljs-number">1</span>, up2=lim2? dig2[i]:<span class="hljs-number">1</span>;<br><span class="hljs-built_in">rep</span>(j,<span class="hljs-number">0</span>,up1) <span class="hljs-built_in">rep</span>(k,<span class="hljs-number">0</span>,up2) &#123;<br><span class="hljs-keyword">if</span>(j&amp;k) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> lg=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(lead&amp;&amp;(j||k)) lg=i+<span class="hljs-number">1</span>;<br>(res+=lg*<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,lim1&amp;&amp;j==up1,lim2&amp;&amp;k==up2,lead&amp;&amp;j==<span class="hljs-number">0</span>&amp;&amp;k==<span class="hljs-number">0</span>)%mod)%=mod;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br>dig1.<span class="hljs-built_in">clear</span>();<br>dig2.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">while</span>(n) dig1.<span class="hljs-built_in">pb</span>(n&amp;<span class="hljs-number">1</span>), n&gt;&gt;=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(m) dig2.<span class="hljs-built_in">pb</span>(m&amp;<span class="hljs-number">1</span>), m&gt;&gt;=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(dig2.<span class="hljs-built_in">size</span>()&lt;dig1.<span class="hljs-built_in">size</span>()) dig2.<span class="hljs-built_in">pb</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(dig1.<span class="hljs-built_in">size</span>()&lt;dig2.<span class="hljs-built_in">size</span>()) dig1.<span class="hljs-built_in">pb</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">SET</span>(f,<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> cnt=dig1.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">dfs</span>(cnt<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>+mod)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">calc</span>(n,m));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;因为时间紧迫所以忽略所有时间复杂度的计算。&lt;/p&gt;
&lt;h2 id=&quot;luogu2657-scoi2009-windy-数&quot;&gt;luogu2657 [SCOI2009] windy 数&lt;/h2&gt;
&lt;p&gt;板子。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; f[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; dim;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pre,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lead)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(~f[i][pre][lim][lead]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f[i][pre][lim][lead];&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; res=f[i][pre][lim][lead];&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; up=lim? dim[i]:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;&lt;br&gt;	res=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(k,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,up) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lead) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,lim&amp;amp;&amp;amp;(k==up),&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,k,lim&amp;amp;&amp;amp;(k==up),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(k-pre)&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,k,lim&amp;amp;&amp;amp;(k==up),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	dim.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(x) &amp;#123;&lt;br&gt;		dim.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(x%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;br&gt;		x/=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;SET&lt;/span&gt;(f,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; cnt=dim.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(cnt&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	a=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), b=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld&#92;n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(b)-&lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(a&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;));&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;luogu4317-花神的数论题&quot;&gt;luogu4317 花神的数论题&lt;/h2&gt;
&lt;p&gt;对于每个 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt;
都算一遍，然后快速幂解决。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mod=&lt;span class=&quot;hljs-number&quot;&gt;1e7&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, m, tar, cnt[&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; f[&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; bit;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(;b;a=a*a%mod,b&amp;gt;&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) c=c*a%mod;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (c==tar);&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(~f[i][lim][c]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f[i][lim][c];&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; res=f[i][lim][c];&lt;br&gt;	res=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; up=lim? bit[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(k,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,up) res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,lim&amp;amp;&amp;amp;k==up,c+k);&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; t=n;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(t) &amp;#123;&lt;br&gt;		bit.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(t&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;		t&amp;gt;&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&amp;#125;&lt;br&gt;	m=bit.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;SET&lt;/span&gt;(f,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;) &amp;#123;&lt;br&gt;		tar=i;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;SET&lt;/span&gt;(f,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;		cnt[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(m,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ans=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;) (ans*=&lt;span class=&quot;hljs-built_in&quot;&gt;fp&lt;/span&gt;(i,cnt[i]))%=mod;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld&#92;n&amp;quot;&lt;/span&gt;,ans);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;luogu2602-zjoi2010-数字计数&quot;&gt;luogu2602 [ZJOI2010] 数字计数&lt;/h2&gt;
&lt;p&gt;对每种数字算一遍。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b, d;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; f[&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; dim;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lead)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(~f[i][c][lim][lead]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f[i][c][lim][lead];&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;amp; res=f[i][c][lim][lead];&lt;br&gt;	res=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; up=lim? dim[i]:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(k,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,up) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lead&amp;amp;&amp;amp;k==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,c,lim&amp;amp;&amp;amp;(k==up),&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; res+=&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,c+(k==d),lim&amp;amp;&amp;amp;(k==up),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;SET&lt;/span&gt;(f,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; t=n;&lt;br&gt;	dim.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(t) &amp;#123;&lt;br&gt;		dim.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(t%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;br&gt;		t/=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; cnt=dim.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(cnt&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	a=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), b=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) &amp;#123;&lt;br&gt;		d=i; &lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld &amp;quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(b)-&lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(a&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;));&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Record" scheme="https://yozora0908.top/categories/Record/"/>
    
    
    <category term="计数" scheme="https://yozora0908.top/tags/%E8%AE%A1%E6%95%B0/"/>
    
    <category term="DP" scheme="https://yozora0908.top/tags/DP/"/>
    
    <category term="数位DP" scheme="https://yozora0908.top/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>关于拓扑序的一类题</title>
    <link href="https://yozora0908.top/2023/topo-ti-solution/"/>
    <id>https://yozora0908.top/2023/topo-ti-solution/</id>
    <published>2023-11-15T12:32:31.000Z</published>
    <updated>2024-01-01T12:33:43.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="loj3997.-csp-s-2023种树">LOJ#3997. 「CSP-S 2023」种树</h2><p>答案显然有单调性，考虑二分答案 <spanclass="math inline">\(mid\)</span>。</p><p>考虑种树的过程，实际上是把每条树边由父亲向儿子定向后的得到的 DAG的一个拓扑序。</p><p>然后我们能够求出 <span class="math inline">\(lim_i\)</span>表示每个点的最晚种树时间，容易二分得到。同时 DAG 本身也对 <spanclass="math inline">\(lim\)</span> 限制，按照逆拓扑序，在 <spanclass="math inline">\(\text{DFS}\)</span> 的过程中更新 <spanclass="math inline">\(lim_x \leftarrow \min_{y \in son(x)} \{lim_y -1\}\)</span> 即可。如果存在 <span class="math inline">\(lim_x &lt;1\)</span>，那么可以直接判掉。</p><p>考虑什么时候会冲突。不难发现此时我们贪心选择 <spanclass="math inline">\(lim\)</span>小的点先种树一定是最优的，因此有冲突当且仅当存在 <spanclass="math inline">\(i\)</span> 满足 <spanclass="math inline">\(\sum_{x=1}^n [h_x \le i] &gt;i\)</span>。开个桶统计即可做到 <spanclass="math inline">\(O(n)\)</span>。</p><p>复杂度 <span class="math inline">\(O(n \log n \log V)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function">ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    ll a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int128 __int128_t</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n;<br>ll a[N], qwq[N];<br><span class="hljs-type">int</span> b[N], c[N];<br><span class="hljs-type">int</span> lim[N], h[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-type">int</span> st,<span class="hljs-type">int</span> ed,<span class="hljs-type">int</span> i)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(st==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>int128 e=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(c[i]&lt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(st&gt;qwq[i]) &#123;<br><span class="hljs-keyword">return</span> ed-st+<span class="hljs-number">1</span>&gt;=a[i];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st&lt;=qwq[i]&amp;&amp;ed&lt;=qwq[i]) &#123;<br>int128 tmp=e*b[i]*(ed-st+<span class="hljs-number">1</span>)+e*c[i]*((e*st+ed)*(ed-st+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> tmp&gt;=e*a[i];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> k=qwq[i];<br>int128 tmp=e*b[i]*(k-st+<span class="hljs-number">1</span>)+e*c[i]*((e*st+k)*(k-st+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br>tmp+=ed-k;<br><span class="hljs-keyword">return</span> tmp&gt;=e*a[i];<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>int128 tmp=e*b[i]*(ed-st+<span class="hljs-number">1</span>)+e*c[i]*((e*st+ed)*(ed-st+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> tmp&gt;=e*a[i];<br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) <span class="hljs-keyword">if</span>(y!=fa) &#123;<br><span class="hljs-built_in">dfs</span>(y,x);<br>lim[x]=<span class="hljs-built_in">min</span>(lim[x],lim[y]<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(lim[x]&gt;=<span class="hljs-number">0</span>) ++h[lim[x]];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>h[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>h[i]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> l=<span class="hljs-number">0</span>, r=n;<br><span class="hljs-keyword">while</span>(l&lt;r) &#123;<br><span class="hljs-type">int</span> md=(l+r+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">valid</span>(md,mid,i)) l=md;<br><span class="hljs-keyword">else</span> r=md<span class="hljs-number">-1</span>;<br>&#125;<br>lim[i]=l;<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(lim[i]&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) &#123;<br>s+=h[i];<br><span class="hljs-keyword">if</span>(s&gt;i) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br> <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;tree.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br> <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;tree.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br>n=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>a[i]=<span class="hljs-built_in">read</span>(), b[i]=<span class="hljs-built_in">read</span>(), c[i]=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span>(c[i]&gt;=<span class="hljs-number">0</span>) qwq[i]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> &#123;<br>qwq[i]=(<span class="hljs-number">1</span>-b[i])/c[i];<br>&#125;<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br>p[x].<span class="hljs-built_in">pb</span>(y), p[y].<span class="hljs-built_in">pb</span>(x);<br>&#125;<br><span class="hljs-type">int</span> l=n, r=<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">while</span>(l&lt;r) &#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) r=mid;<br><span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="abc304ex-constrained-topological-sort">ABC304Ex ConstrainedTopological Sort</h2><p>首先可以拓扑排序判掉不是 DAG 的情况。</p><p>上题的做法也适用于一般的 DAG。</p><p>我们用正反两遍拓扑排序更新 <span class="math inline">\(l_x\)</span>与 <span class="math inline">\(r_x\)</span>，此时的 <spanclass="math inline">\(l_x,r_x\)</span> 一定是考虑了所有限制后的值。</p><p>贪心策略是让在每个点的拓扑序尽可能小，我们在每个 <spanclass="math inline">\(r_x\)</span> 处记录 <spanclass="math inline">\(x\)</span>，枚举拓扑序 <spanclass="math inline">\(i\)</span>，让满足 <spanclass="math inline">\(r_x=i\)</span> 的点选择大于等于 <spanclass="math inline">\(l_x\)</span> 的最小的拓扑序。</p><p>用<code>std::set</code>即可维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, m, l[N], r[N], in[N], ans[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; topo, p[N], v[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">toposort</span><span class="hljs-params">()</span> </span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(!in[i]) q.<span class="hljs-built_in">push</span>(i);<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>topo.<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) &#123;<br>l[y]=<span class="hljs-built_in">max</span>(l[y],l[x]+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(--in[y]==<span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(topo.<span class="hljs-built_in">size</span>()!=n) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">reverse</span>(topo.<span class="hljs-built_in">begin</span>(),topo.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:topo) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) &#123;<br>r[x]=<span class="hljs-built_in">min</span>(r[x],r[y]<span class="hljs-number">-1</span>);<br>&#125;<br>v[r[x]].<span class="hljs-built_in">pb</span>(x);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br>p[x].<span class="hljs-built_in">pb</span>(y);<br>++in[y];<br>&#125;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>l[i]=<span class="hljs-built_in">read</span>(), r[i]=<span class="hljs-built_in">read</span>();<br>&#125;<br><span class="hljs-built_in">toposort</span>();<br>set&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>s.<span class="hljs-built_in">insert</span>(i);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:v[i]) &#123;<br><span class="hljs-keyword">auto</span> it=s.<span class="hljs-built_in">lower_bound</span>(l[x]);<br><span class="hljs-keyword">if</span>(it==s.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>ans[x]=*it;<br>s.<span class="hljs-built_in">erase</span>(it);<br>&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,ans[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu1954-noi2010-航空管制">luogu1954 [NOI2010] 航空管制</h2><p>咕咕咕</p><h2 id="luogu3243-hnoi2015-菜肴制作">luogu3243 [HNOI2015] 菜肴制作</h2><p>做法是建反图，贪心放置字典序大的。</p><p>证明？等放寒假再说吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> T, n, m, in[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N], ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">toposort</span><span class="hljs-params">()</span> </span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<br>ans.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(!in[i]) q.<span class="hljs-built_in">push</span>(i);<br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>ans.<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) &#123;<br><span class="hljs-keyword">if</span>(--in[y]==<span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ans.<span class="hljs-built_in">size</span>()!=n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impossible! &quot;</span>);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,x);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) p[i].<span class="hljs-built_in">clear</span>(), in[i]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br>p[y].<span class="hljs-built_in">pb</span>(x), ++in[x];<br>&#125;<br><span class="hljs-built_in">toposort</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>T=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;loj3997.-csp-s-2023种树&quot;&gt;LOJ#3997. 「CSP-S 2023」种树&lt;/h2&gt;
&lt;p&gt;答案显然有单调性，考虑二分答案 &lt;span class=&quot;math inline&quot;&gt;&#92;(mid&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;考虑种树的过程，实际上是把每条树边由父亲向儿子定向后的得到的 DAG
的一个拓扑序。&lt;/p&gt;
&lt;p&gt;然后我们能够求出 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim_i&#92;)&lt;/span&gt;
表示每个点的最晚种树时间，容易二分得到。同时 DAG 本身也对 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim&#92;)&lt;/span&gt; 限制，按照逆拓扑序，在 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;text{DFS}&#92;)&lt;/span&gt; 的过程中更新 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim_x &#92;leftarrow &#92;min_{y &#92;in son(x)} &#92;{lim_y -
1&#92;}&#92;)&lt;/span&gt; 即可。如果存在 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim_x &amp;lt;
1&#92;)&lt;/span&gt;，那么可以直接判掉。&lt;/p&gt;
&lt;p&gt;考虑什么时候会冲突。不难发现此时我们贪心选择 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim&#92;)&lt;/span&gt;
小的点先种树一定是最优的，因此有冲突当且仅当存在 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 满足 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;sum_{x=1}^n [h_x &#92;le i] &amp;gt;
i&#92;)&lt;/span&gt;。开个桶统计即可做到 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(n)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;复杂度 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(n &#92;log n &#92;log V)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ll long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;ll &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    ll a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int128 __int128_t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N=&lt;span class=&quot;hljs-number&quot;&gt;1e5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n;&lt;br&gt;ll a[N], qwq[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b[N], c[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim[N], h[N];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; p[N];&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; st,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ed,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;&lt;br&gt;	int128 e=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c[i]&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st&amp;gt;qwq[i]) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ed-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;=a[i];&lt;br&gt;		&amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st&amp;lt;=qwq[i]&amp;amp;&amp;amp;ed&amp;lt;=qwq[i]) &amp;#123;&lt;br&gt;			int128 tmp=e*b[i]*(ed-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)+e*c[i]*((e*st+ed)*(ed-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tmp&amp;gt;=e*a[i];&lt;br&gt;		&amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=qwq[i];&lt;br&gt;			int128 tmp=e*b[i]*(k-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)+e*c[i]*((e*st+k)*(k-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br&gt;			tmp+=ed-k;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tmp&amp;gt;=e*a[i];&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;		int128 tmp=e*b[i]*(ed-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)+e*c[i]*((e*st+ed)*(ed-st+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tmp&amp;gt;=e*a[i];&lt;br&gt;	&amp;#125; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fa)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; y:p[x]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(y!=fa) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(y,x);&lt;br&gt;		lim[x]=&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(lim[x],lim[y]&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lim[x]&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ++h[lim[x]];&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;	h[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &amp;#123;&lt;br&gt;		h[i]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;		&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, r=n;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(l&amp;lt;r) &amp;#123;&lt;br&gt;			&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; md=(l+r+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;valid&lt;/span&gt;(md,mid,i)) l=md;&lt;br&gt;			&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; r=md&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;		&amp;#125;&lt;br&gt;		lim[i]=l;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lim[i]&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,n) &amp;#123;&lt;br&gt;		s+=h[i];&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s&amp;gt;i) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt; 	&lt;span class=&quot;hljs-built_in&quot;&gt;freopen&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;tree.in&amp;quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,stdin);&lt;br&gt; 	&lt;span class=&quot;hljs-built_in&quot;&gt;freopen&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;tree.out&amp;quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;,stdout);&lt;br&gt;	n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &amp;#123;&lt;br&gt;		a[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), b[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), c[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c[i]&amp;gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) qwq[i]=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;			qwq[i]=(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-b[i])/c[i];&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,n) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), y=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;		p[x].&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(y), p[y].&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(x);&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l=n, r=&lt;span class=&quot;hljs-number&quot;&gt;1e9&lt;/span&gt;;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(l&amp;lt;r) &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;check&lt;/span&gt;(mid)) r=mid;&lt;br&gt;		&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; l=mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld&#92;n&amp;quot;&lt;/span&gt;,l);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;abc304ex-constrained-topological-sort&quot;&gt;ABC304Ex Constrained
Topological Sort&lt;/h2&gt;
&lt;p&gt;首先可以拓扑排序判掉不是 DAG 的情况。&lt;/p&gt;
&lt;p&gt;上题的做法也适用于一般的 DAG。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="图论" scheme="https://yozora0908.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="二分答案" scheme="https://yozora0908.top/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="拓扑排序" scheme="https://yozora0908.top/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「NOIP Record」#23 贪心（2）</title>
    <link href="https://yozora0908.top/2023/noip-record-23/"/>
    <id>https://yozora0908.top/2023/noip-record-23/</id>
    <published>2023-11-12T11:23:06.000Z</published>
    <updated>2024-01-01T12:32:08.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="abc137d-summer-vacation">ABC137D Summer Vacation</h3><p>错解：扫时间，维护当前可以做的事件集合，贪心选取收益最大的。</p><p>正解：把事件以收益为第一关键字，时长为第二关键字递增排序，每次选取收益最大的，找到能使其产生收益的最晚的那天安排这个事件。用并查集维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node&amp; r) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">if</span>(b!=r.b) <span class="hljs-keyword">return</span> b&gt;r.b;<br>        <span class="hljs-keyword">return</span> a&gt;r.a;<br>    &#125;<br>&#125; a[N];<br><span class="hljs-type">int</span> fa[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x==fa[x]? x:fa[x]=<span class="hljs-built_in">get</span>(fa[x]); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123;<br>    x=<span class="hljs-built_in">get</span>(x), y=<span class="hljs-built_in">get</span>(y);<br>    <span class="hljs-keyword">if</span>(x!=y) fa[x]=y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) a[i].a=<span class="hljs-built_in">read</span>(), a[i].b=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) fa[i]=i;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(m-a[i].a+<span class="hljs-number">1</span>&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> p=<span class="hljs-built_in">get</span>(m-a[i].a+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">merge</span>(p,p<span class="hljs-number">-1</span>);<br>        ans+=a[i].b;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="uva1316-supermarket">UVA1316 Supermarket</h2><p>上面那题为啥不能扫事件呢？</p><p>仔细想想就能发现，这个是有后效性的。</p><p>但是这一题就可以扫时间。具体的，我们把所有物品按照过期时间递增排序，然后按顺序枚举每个物品，用堆维护当前选择卖出的物品集合。如果当前物品的DDL <span class="math inline">\(d_i\)</span>大于集合大小，那么可以直接将其加入，否则尝试把集合中价值最小的那个物品换出来即可。</p><p>这个就是没有后效性的，因为每个物品的影响只有它被安放的那一天，并且过了DDL 后这些物品都不能产生贡献。然后因为每个元素在尽可能靠近 DDL的时刻被卖出去一定是不劣的，我们扫的其实是DDL，同时两个元素的决策集合最多相差一个元素，所以我们可以用这种类似反悔贪心的做法。</p><p>本题也可以使用并查集的做法。由于每个问题在尽可能靠近 DDL处卖出去最合适，所以我们可以把所有物品按照价值递增排序后用并查集维护这个过程。其正确性就在于，如果一个物品因此放置失败，那么把换掉任何一个之前放过的物品都不优秀。</p><p>代码就不写了。</p><h2 id="luogu3619-魔法">luogu3619 魔法</h2><p>我们一定收先做 <span class="math inline">\(b_i \ge 0\)</span>的任务，再做 <span class="math inline">\(b_i &lt; 0\)</span>的任务，这个显然。</p><p>对于 <span class="math inline">\(b_i \ge 0\)</span>的任务，我们肯定是优先做 <span class="math inline">\(t_i\)</span>更小的，这个也显然。</p><p>对于 <span class="math inline">\(b_i &lt; 0\)</span>的任务，则没有那么显然。</p><p>对于两个任务 <span class="math inline">\(i,j\)</span>，满足 <spanclass="math inline">\(b_i,b_j &lt;0\)</span>。</p><ul><li>先做 <span class="math inline">\(i\)</span>，那么失败的条件是 <spanclass="math inline">\(T+b_i &lt; t_j\)</span>，即 <spanclass="math inline">\(T &lt; t_j - b_i\)</span>。</li><li>先做 <span class="math inline">\(j\)</span>，那么失败的条件是 <spanclass="math inline">\(T+b_j &lt; t_i\)</span>，即 <spanclass="math inline">\(T &lt; t_i - b_j\)</span>。</li></ul><p>由于我们要尽可能做完所有任务，所以应该先完成更紧的条件。考虑 <spanclass="math display">\[t_j - b_i &lt; t_i - b_j\]</span> 如果满足这个条件，那么 <span class="math inline">\(i\)</span>应该先做，因为做完一个后 <span class="math inline">\(T\)</span>必然减小。</p><p>此时 <span class="math inline">\(b_i + t_i &gt;b_j+t_j\)</span>，按照这个排序即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> T, n, m, t[N], b[N], a[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(b[x]&gt;=<span class="hljs-number">0</span>&amp;&amp;b[y]&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> t[x]&lt;t[x];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b[x]&gt;=<span class="hljs-number">0</span>||b[y]&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> b[x]&gt;=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> t[x]+b[x]&gt;t[y]+b[y];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) t[i]=<span class="hljs-built_in">read</span>(), b[i]=<span class="hljs-built_in">read</span>(), a[i]=i;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-type">int</span> cur=m;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        <span class="hljs-keyword">if</span>(cur&gt;t[a[i]]) cur+=b[a[i]];<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1s&quot;</span>); <span class="hljs-keyword">return</span>; &#125;<br>        <span class="hljs-keyword">if</span>(cur&lt;=<span class="hljs-number">0</span>) &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1s&quot;</span>); <span class="hljs-keyword">return</span>; &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;+1s&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    T=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu1986-元旦晚会">luogu1986 元旦晚会</h2><p>带权区间选点。</p><p>所有区间按照右端点递增排序，对区间开扫，线段树维护区间有多少个人没有话筒。如果一个区间不满足条件，那么二分出一个后缀，区间修改即可。</p><p>偷懒没写线段树上二分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">30005</span>, M=<span class="hljs-number">5005</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, c;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node&amp; b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">if</span>(r!=b.r) <span class="hljs-keyword">return</span> r&lt;b.r;<br>        <span class="hljs-keyword">return</span> l&lt;b.l;<br>    &#125;<br>&#125; a[M];<br><span class="hljs-type">int</span> t[N&lt;&lt;<span class="hljs-number">2</span>], tag[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; t[x]=t[x&lt;&lt;<span class="hljs-number">1</span>]+t[x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maketag</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    t[x]=<span class="hljs-number">0</span>;<br>    tag[x]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!tag[x]) &#123;<br>        <span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>        tag[x]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>    tag[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l==r) &#123; t[x]=<span class="hljs-number">1</span>; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-built_in">build</span>(x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123; <span class="hljs-built_in">maketag</span>(x); <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">pushdown</span>(x);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid) <span class="hljs-built_in">upd</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(R&gt;mid) <span class="hljs-built_in">upd</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="hljs-keyword">return</span> t[x];<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>, res=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushdown</span>(x);<br>    <span class="hljs-keyword">if</span>(L&lt;=mid) res+=<span class="hljs-built_in">query</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(R&gt;mid) res+=<span class="hljs-built_in">query</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>        a[i].l=<span class="hljs-built_in">read</span>(), a[i].r=<span class="hljs-built_in">read</span>(), a[i].c=<span class="hljs-built_in">read</span>();<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+m+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-type">int</span> l=a[<span class="hljs-number">1</span>].r-a[<span class="hljs-number">1</span>].c+<span class="hljs-number">1</span>, r=a[<span class="hljs-number">1</span>].r;<br>    <span class="hljs-type">int</span> ans=a[<span class="hljs-number">1</span>].c;<br>    <span class="hljs-built_in">upd</span>(l,r);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,m) &#123;<br>        <span class="hljs-type">int</span> cnt=a[i].r-a[i].l+<span class="hljs-number">1</span>-<span class="hljs-built_in">query</span>(a[i].l,a[i].r);<br>        <span class="hljs-keyword">if</span>(cnt&gt;=a[i].c) <span class="hljs-keyword">continue</span>;<br>        a[i].c-=cnt;<br>        <span class="hljs-type">int</span> L=a[i].l, R=a[i].r;<br>        <span class="hljs-keyword">while</span>(L&lt;R) &#123;<br>            <span class="hljs-type">int</span> mid=(L+R+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">query</span>(mid,a[i].r)&gt;=a[i].c) L=mid; <span class="hljs-keyword">else</span> R=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        ans+=a[i].c;<br>        <span class="hljs-built_in">upd</span>(L,a[i].r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu6155-修改">luogu6155 修改</h2><p>把 <span class="math inline">\(a_i\)</span> 递减排序，对于每个 <spanclass="math inline">\(a_i\)</span>，让其变成大于 <spanclass="math inline">\(a_i\)</span>的最小的没有被占用的数，一定是最优的。感性理解显然。</p><p>在值域上用并查集维护，可以求出每个位置被操作的次数。</p><p>把 <span class="math inline">\(b_i\)</span>递增排序，每个位置被操作的次数递减排序，这样匹配也一定最优。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, a[N], b[N];<br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; fa;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>     <span class="hljs-keyword">if</span>(!fa[x]) <span class="hljs-keyword">return</span> fa[x]=x+<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">get</span>(fa[x]);<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) a[i]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) b[i]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-built_in">get</span>(a[i])-(a[i]+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>) v.<span class="hljs-built_in">pb</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>    <span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>);<br>    uint ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> pos=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:v) &#123;<br>        ans+=x*b[pos];<br>        ++pos;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu1607-fair-shuttle">luogu1607 Fair Shuttle</h2><p>这种题，猜结论远远比推结论更实用。</p><p>策略：把所有区间按照右端点为第一关键字，左端点为第二关键字递增排序。从左往右扫，能上车多少就上多少。</p><blockquote><p>证明。</p><p>考虑排序后的两个区间。</p><ol type="1"><li>不相交。显然互不影响。</li><li>相交但不包含。由于靠前的区间更早结尾，所以对于它们重叠的那一块，选择前面的区间必然不劣。</li><li>存在包含关系。此时我们先处理较小的区间。同理，重叠的那一块，选择较小的区间必然不劣。</li></ol></blockquote><p>如何维护呢？</p><p>我们开一棵线段树维护在每个站点时车上有多少人，同时维护区间最大值。这样就能求出最多上车多少人，然后区间加法即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>, M=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, m, c, ans;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, x;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node&amp; b) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">if</span>(r==b.r) <span class="hljs-keyword">return</span> l&lt;b.l;<br>        <span class="hljs-keyword">return</span> r&lt;b.r;<br>    &#125;<br>&#125; a[M];<br><span class="hljs-type">int</span> t[N&lt;&lt;<span class="hljs-number">2</span>], tag[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; t[x]=<span class="hljs-built_in">max</span>(t[x&lt;&lt;<span class="hljs-number">1</span>],t[x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maketag</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> d)</span> </span>&#123; t[x]+=d, tag[x]+=d; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(tag[x]!=<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>,tag[x]);<br>        <span class="hljs-built_in">maketag</span>(x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,tag[x]);<br>        tag[x]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) &#123; <span class="hljs-built_in">maketag</span>(x,d); <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-built_in">pushdown</span>(x);<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid) <span class="hljs-built_in">upd</span>(L,R,d,x&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>    <span class="hljs-keyword">if</span>(R&gt;mid) <span class="hljs-built_in">upd</span>(L,R,d,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-type">int</span> r=n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="hljs-keyword">return</span> t[x];<br>    <span class="hljs-built_in">pushdown</span>(x);<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>, res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=mid) res=<span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">query</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>,l,mid));<br>    <span class="hljs-keyword">if</span>(R&gt;mid) res=<span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">query</span>(L,R,x&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    m=<span class="hljs-built_in">read</span>(), n=<span class="hljs-built_in">read</span>(), c=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>        a[i].l=<span class="hljs-built_in">read</span>(), a[i].r=<span class="hljs-built_in">read</span>()<span class="hljs-number">-1</span>, a[i].x=<span class="hljs-built_in">read</span>();<br>        <span class="hljs-comment">// 注意右端点-1</span><br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+m+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>        <span class="hljs-type">int</span> l=a[i].l, r=a[i].r;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-built_in">query</span>(l,r);<br>        <span class="hljs-keyword">if</span>(cnt&gt;=c) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> d=<span class="hljs-built_in">min</span>(a[i].x,c-cnt);<br>        ans+=d;<br>        <span class="hljs-built_in">upd</span>(l,r,d);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;abc137d-summer-vacation&quot;&gt;ABC137D Summer Vacation&lt;/h3&gt;
&lt;p&gt;错解：扫时间，维护当前可以做的事件集合，贪心选取收益最大的。&lt;/p&gt;
&lt;p&gt;正解：把事件以收益为第一关键字，时长为第二关键字递增排序，每次选取收益最大的，找到能使其产生收益的最晚的那天安排这个事件。用并查集维护。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N=&lt;span class=&quot;hljs-number&quot;&gt;1e5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, m;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;node&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; node&amp;amp; r) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b!=r.b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b&amp;gt;r.b;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a&amp;gt;r.a;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125; a[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fa[N];&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x==fa[x]? x:fa[x]=&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(fa[x]); &amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    x=&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(x), y=&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(y);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(x!=y) fa[x]=y;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), m=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) a[i].a=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), a[i].b=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(a+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,a+n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ans=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,m) fa[i]=i;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m-a[i].a+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p=&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(m-a[i].a+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!p) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;&lt;br&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;merge&lt;/span&gt;(p,p&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);&lt;br&gt;        ans+=a[i].b;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld&#92;n&amp;quot;&lt;/span&gt;,ans);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;uva1316-supermarket&quot;&gt;UVA1316 Supermarket&lt;/h2&gt;
&lt;p&gt;上面那题为啥不能扫事件呢？&lt;/p&gt;
&lt;p&gt;仔细想想就能发现，这个是有后效性的。&lt;/p&gt;
&lt;p&gt;但是这一题就可以扫时间。具体的，我们把所有物品按照过期时间递增排序，然后按顺序枚举每个物品，用堆维护当前选择卖出的物品集合。如果当前物品的
DDL &lt;span class=&quot;math inline&quot;&gt;&#92;(d_i&#92;)&lt;/span&gt;
大于集合大小，那么可以直接将其加入，否则尝试把集合中价值最小的那个物品换出来即可。&lt;/p&gt;
&lt;p&gt;这个就是没有后效性的，因为每个物品的影响只有它被安放的那一天，并且过了
DDL 后这些物品都不能产生贡献。然后因为每个元素在尽可能靠近 DDL
的时刻被卖出去一定是不劣的，我们扫的其实是
DDL，同时两个元素的决策集合最多相差一个元素，所以我们可以用这种类似反悔贪心的做法。&lt;/p&gt;
&lt;p&gt;本题也可以使用并查集的做法。由于每个问题在尽可能靠近 DDL
处卖出去最合适，所以我们可以把所有物品按照价值递增排序后用并查集维护这个过程。其正确性就在于，如果一个物品因此放置失败，那么把换掉任何一个之前放过的物品都不优秀。&lt;/p&gt;</summary>
    
    
    
    <category term="Record" scheme="https://yozora0908.top/categories/Record/"/>
    
    
    <category term="并查集" scheme="https://yozora0908.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="线段树" scheme="https://yozora0908.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="贪心" scheme="https://yozora0908.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF900D Unusual Sequences 题解</title>
    <link href="https://yozora0908.top/2023/cf900d-solution/"/>
    <id>https://yozora0908.top/2023/cf900d-solution/</id>
    <published>2023-11-12T07:56:15.000Z</published>
    <updated>2024-01-01T12:16:19.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>如果 <span class="math inline">\(x \nmid y\)</span>，那么无解。</p><p>令 <span class="math inline">\(m =y/x\)</span>，问题转化为求有多少个序列，满足 <spanclass="math inline">\(\gcd=1\)</span>，和为 <spanclass="math inline">\(m\)</span>。</p><p>设 <span class="math inline">\(f(n)\)</span> 为和为 <spanclass="math inline">\(n\)</span> 的序列数量，<spanclass="math inline">\(g(n)\)</span> 为和为 <spanclass="math inline">\(n\)</span> 且 <spanclass="math inline">\(\gcd=1\)</span> 的序列数量，有 <spanclass="math display">\[f(n) = \sum_{d \mid n} g \Big( \frac{n}{d}\Big) = 2^{n-1}\]</span> 容斥掉就是 <span class="math display">\[g(n) = f(n) - \sum_{d \mid n, d \neq 1} g\Big(\frac{n}{d}\Big)\]</span> 反演掉就是 <span class="math display">\[g(n) = \sum_{d \mid n} \mu(d) g\Big(\frac{n}{d}\Big)\]</span></p><p>答案是 <span class="math inline">\(g(m)\)</span>。</p><p>代码中求的是后者。枚举约数然后 <spanclass="math inline">\(O(\sqrt{m})\)</span> 求 <spanclass="math inline">\(\mu\)</span>，复杂度 <spanclass="math inline">\(O(m)\)</span>，常数较小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> x, y, ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;a=a*a%mod,b&gt;&gt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) c=c*a%mod;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mu</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> res;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=x;++i) <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>) &#123;<br>x/=i;<br><span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>res=-res;<br>&#125;<br>res=-res;<br><span class="hljs-keyword">return</span> (res+mod)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span>(y%x) &#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>y/=x;<br><span class="hljs-comment">//printf(&quot;mu(2)=%lld\n&quot;,mu(2));</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i*i&lt;=y;++i) <span class="hljs-keyword">if</span>(y%i==<span class="hljs-number">0</span>) &#123;<br>(ans+=<span class="hljs-built_in">mu</span>(i)*<span class="hljs-built_in">fp</span>(<span class="hljs-number">2</span>,y/i<span class="hljs-number">-1</span>)%mod)%=mod;<br><span class="hljs-keyword">if</span>(i*i!=y) (ans+=<span class="hljs-built_in">mu</span>(y/i)*<span class="hljs-built_in">fp</span>(<span class="hljs-number">2</span>,i<span class="hljs-number">-1</span>)%mod)%=mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;如果 &lt;span class=&quot;math inline&quot;&gt;&#92;(x &#92;nmid y&#92;)&lt;/span&gt;，那么无解。&lt;/p&gt;
&lt;p&gt;令 &lt;span class=&quot;math inline&quot;&gt;&#92;(m =
y/x&#92;)</summary>
      
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="计数" scheme="https://yozora0908.top/tags/%E8%AE%A1%E6%95%B0/"/>
    
    <category term="DP" scheme="https://yozora0908.top/tags/DP/"/>
    
    <category term="数论" scheme="https://yozora0908.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="容斥原理" scheme="https://yozora0908.top/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
    <category term="莫比乌斯反演" scheme="https://yozora0908.top/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>「NOIP Record」#22 贪心（1）</title>
    <link href="https://yozora0908.top/2023/noip-record-22/"/>
    <id>https://yozora0908.top/2023/noip-record-22/</id>
    <published>2023-11-12T07:46:06.000Z</published>
    <updated>2024-01-01T12:21:34.715Z</updated>
    
    <content type="html"><![CDATA[<p>贪心的基本思路是抹除后效性。</p><h2 id="luogu9378-thupc-2023-决赛-物理实验">luogu9378 [THUPC 2023 决赛]物理实验</h2><p>尽可能保留编号小的实验一定是最优的。</p><p>考虑维护一个集合 <span class="math inline">\(S\)</span>表示当前已经确定可以保留的实验集合，枚举实验 <spanclass="math inline">\(i\)</span> 尝试加入，这样原问题就转化为了 <spanclass="math inline">\(n\)</span> 轮判定问题。</p><p>考虑如何 check。由于确定了 <span class="math inline">\(S\)</span>并且做 <span class="math inline">\(S\)</span>以外的实验没有意义，所以我们能求出每一轮应该出局的实验，同时求出第 <spanclass="math inline">\(i\)</span> 个实验最晚被做完的时间 <spanclass="math inline">\(lim_i\)</span>。</p><p>接下来问题转化为：是否存在一个 <span class="math inline">\(1 \simn\)</span> 的排列，满足 <span class="math inline">\(i\)</span>所在的位置小于等于 <span class="math inline">\(lim_i\)</span>。</p><p>按照 <span class="math inline">\(lim\)</span>递增排序后贪心放即可。</p><p>时间复杂度 <span class="math inline">\(O(n^2m)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>       <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>       c=<span class="hljs-built_in">getchar</span>();<br>   &#125;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">605</span>;<br><span class="hljs-type">int</span> n, m, a[N], p[N][N], b[N];<br><span class="hljs-type">int</span> lim[N];<br><span class="hljs-type">bool</span> s[N], done[N], out[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> lim[x]&lt;lim[y]; &#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) done[i]=out[i]=<span class="hljs-number">0</span>, lim[i]=n, b[i]=i;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(!s[p[i][j]]&amp;&amp;!out[p[i][j]]) &#123; k=j; <span class="hljs-keyword">break</span>; &#125;<br>        <span class="hljs-keyword">if</span>(!k) k=n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> out[p[i][k]]=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,k<span class="hljs-number">-1</span>) <span class="hljs-keyword">if</span>(s[p[i][j]]&amp;&amp;!done[p[i][j]]) lim[p[i][j]]=a[i], done[p[i][j]]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(i&gt;lim[b[i]]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ans.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-keyword">if</span>(s[b[i]]) ans.<span class="hljs-built_in">pb</span>(b[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) a[i]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,n) p[i][j]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        s[i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>()) s[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu9209-不灭不死鸟之尾">luogu9209 不灭「不死鸟之尾」</h2><p>我们能发现对于第 <span class="math inline">\(i\)</span>辆车，其最小代价是 <span class="math inline">\(W_i -\max(L_i,R_i)(n-i)\)</span>，只要我们贴着 <spanclass="math inline">\(\max(L_i,R_i)\)</span>对应的那边放就一定能取到这个值。</p><p>不难发现如果每次都这样做，那么是没有后效性的，所以答案就是 <spanclass="math inline">\(\sum_{i=1}^{n} W_i -\max(L_i,R_i)(n-i)\)</span>。</p><h2 id="cf1661d-progressions-covering">CF1661D ProgressionsCovering</h2><p>从后往前扫，如果 <span class="math inline">\(a_i\)</span>不满足条件，那么就做一次以 <span class="math inline">\(i\)</span>为右端点的操作。</p><p>如何维护？区间加等差数列等于在差分序列上单点加再区间加，那么再差分一次就好了。</p><p>用树状数组维护二阶差分序列即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>       <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>       c=<span class="hljs-built_in">getchar</span>();<br>   &#125;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, k, ans, b[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br>    <span class="hljs-type">int</span> c[N], c2[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> d)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;=n;i+=i&amp;-i) &#123;<br>            c[i]+=d, c2[i]+=x*d;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i;i-=i&amp;-i) res+=(x+<span class="hljs-number">1</span>)*c[i]-c2[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cil</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> (x+y<span class="hljs-number">-1</span>)/y; &#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        b[i]=<span class="hljs-built_in">read</span>();<br>        T.<span class="hljs-built_in">add</span>(i,b[i]);<br>        T.<span class="hljs-built_in">add</span>(i+<span class="hljs-number">1</span>,<span class="hljs-number">-2</span>*b[i]);<br>        T.<span class="hljs-built_in">add</span>(i+<span class="hljs-number">2</span>,b[i]);<br>    &#125;<br>    <span class="hljs-comment">// op b[l,r] = c1[l,r]-1 c1[r+1]+k = c2[l]-1 c2[r+1]+1 c2[r+1]+k, c2[r+2]-k</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i;--i) &#123;<br>        <span class="hljs-type">int</span> x=T.<span class="hljs-built_in">query</span>(i);<br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> d=<span class="hljs-number">0</span>, pos=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i&gt;=k) d=<span class="hljs-built_in">cil</span>(x,k), pos=i-k+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> d=<span class="hljs-built_in">cil</span>(x,i), pos=<span class="hljs-number">1</span>;<br>            ans+=d, T.<span class="hljs-built_in">add</span>(pos,-d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu5749-ioi2019-排列鞋子">luogu5749 [IOI2019] 排列鞋子</h2><p>从左往右扫每一只鞋子，我们都把到能与之配对的距离其最近的鞋子交换过来，容易发现此时代价一定取到了下界。</p><p>用<code>std::vector</code>储存即可，按顺序扫一遍可以保证其内部也是有序的。不过vector在头部操作不是很方便，所以我们倒着做，这样所有操作都是尾部操作。</p><p>现在我们需要动态维护任意两点距离，这个可以转化成前缀相减。注意到我们现在只会让鞋子从左往右交换，从而把位置<span class="math inline">\(p\)</span> 的鞋子向右交换只会影响 <spanclass="math inline">\(p\)</span> 以及后面的前缀，树状数组轻松维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>       <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>       c=<span class="hljs-built_in">getchar</span>();<br>   &#125;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, d, ans, a[N];<br><span class="hljs-type">bool</span> v[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br>    <span class="hljs-type">int</span> c[N];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> d)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(;x&lt;=n;x+=x&amp;-x) c[x]+=d;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;x;x-=x&amp;-x) res+=c[x];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>()&lt;&lt;<span class="hljs-number">1</span>;<br>    d=n&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        a[i]=<span class="hljs-built_in">read</span>();<br>        T.<span class="hljs-built_in">add</span>(i,<span class="hljs-number">1</span>);<br>        p[a[i]+d].<span class="hljs-built_in">pb</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">per</span>(i,n,<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(!v[i]) &#123;<br>        v[i]=<span class="hljs-number">1</span>;<br>        p[a[i]+d].<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-type">int</span> j=p[(-a[i])+d].<span class="hljs-built_in">back</span>();<br>        p[(-a[i])+d].<span class="hljs-built_in">pop_back</span>();<br>        v[j]=<span class="hljs-number">1</span>;<br>        ans+=T.<span class="hljs-built_in">query</span>(i)-T.<span class="hljs-built_in">query</span>(j)-(a[i]&gt;<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// a[i]&gt;0，说明其需要在右边，少交换一次</span><br>        T.<span class="hljs-built_in">add</span>(j,<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="abc254ex-multiply-or-divide-by-2">ABC254Ex Multiply or Divide by2</h2><p>由于对一个 <span class="math inline">\(a_i\)</span> 乘 <spanclass="math inline">\(2\)</span> 必然对应 <spanclass="math inline">\(B\)</span> 中的一个偶数，所以可以看作是 <spanclass="math inline">\(\lfloor b_i/2\rfloor\)</span>，于是问题转化为只有除法操作，并且所有数都不会变大。</p><p>考虑全局最大值 <span class="math inline">\(x\)</span>。</p><ul><li>如果 <span class="math inline">\(A\)</span> 与 <spanclass="math inline">\(B\)</span> 均包含 <spanclass="math inline">\(x\)</span>，那么直接将其删除。</li><li>否则如果 <span class="math inline">\(A\)</span> 包含之，那么删除<span class="math inline">\(x\)</span> 并加入 <spanclass="math inline">\(\lfloor x/2 \rfloor\)</span>。</li><li>否则如果 <span class="math inline">\(B\)</span> 包含之，若 <spanclass="math inline">\(2 \mid x\)</span>，那么删除 <spanclass="math inline">\(x\)</span> 并加入 <spanclass="math inline">\(x/2\)</span>；否则无解。</li></ul><p>使用优先队列实现，复杂度 <span class="math inline">\(O(n \log n \logV)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>       <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>       c=<span class="hljs-built_in">getchar</span>();<br>   &#125;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, ans, a[N], b[N];<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; p, q;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) a[i]=<span class="hljs-built_in">read</span>(), p.<span class="hljs-built_in">push</span>(a[i]);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) b[i]=<span class="hljs-built_in">read</span>(), q.<span class="hljs-built_in">push</span>(b[i]);<br>    <span class="hljs-keyword">while</span>(p.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">if</span>(p.<span class="hljs-built_in">top</span>()==q.<span class="hljs-built_in">top</span>()) p.<span class="hljs-built_in">pop</span>(), q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p.<span class="hljs-built_in">top</span>()&gt;q.<span class="hljs-built_in">top</span>()) &#123;<br>            <span class="hljs-type">int</span> x=p.<span class="hljs-built_in">top</span>();<br>            p.<span class="hljs-built_in">pop</span>();<br>            p.<span class="hljs-built_in">push</span>(x&gt;&gt;<span class="hljs-number">1</span>);<br>            ++ans;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">top</span>()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> x=q.<span class="hljs-built_in">top</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(x&gt;&gt;<span class="hljs-number">1</span>);<br>            ++ans;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu8945-inferno">luogu8945 Inferno</h2><p>我们填 <span class="math inline">\(1\)</span> 的位置一定是连续的一段<span class="math inline">\(0\)</span>，否则一定不优。</p><p>更进一步的，我们可以枚举最大子段和对应的区间左端点 <spanclass="math inline">\(l\)</span>，然后最优解一定是从这个点往后把 <spanclass="math inline">\(k\)</span> 个 <spanclass="math inline">\(0\)</span> 修改为 <spanclass="math inline">\(1\)</span>。</p><p>设 <span class="math inline">\(pos\)</span> 为这 <spanclass="math inline">\(k\)</span> 个 <spanclass="math inline">\(0\)</span> 中最后一个所在的位置，那么我们可以对<span class="math inline">\(r \in [l,pos]\)</span> 和 <spanclass="math inline">\(r \in [pos+1,n]\)</span> 两种情况进行讨论。</p><p>设 <span class="math inline">\(s_{i,1}\)</span> 为把 <spanclass="math inline">\([1,i]\)</span> 中所有的 <spanclass="math inline">\(0\)</span> 都改为 <spanclass="math inline">\(1\)</span> 的前缀和，<spanclass="math inline">\(s_{i,2}\)</span> 为把 <spanclass="math inline">\([1,i]\)</span> 中所有 <spanclass="math inline">\(0\)</span> 都改为 <spanclass="math inline">\(-1\)</span> 的前缀和。</p><ul><li><span class="math inline">\(r \in[l,pos]\)</span>，此时最大子段和即为 <spanclass="math inline">\(\max_{i=l}^{pos}\{s_{i,1}\}\)</span>。我们能发现，如果<span class="math inline">\(l\)</span> 增加，那么 <spanclass="math inline">\(pos\)</span> 递增，单调队列即可做到 <spanclass="math inline">\(O(1)\)</span> 查询。</li><li><span class="math inline">\(r \in[pos+1,n]\)</span>，此时最大子段和为 <spanclass="math inline">\(\max_{i=pos+1}^{n} \{s_{i,2}\} + k -s_{l,2}+k\)</span>，维护 <span class="math inline">\(s_{i,2}\)</span>的后缀最大值即可 <span class="math inline">\(O(1)\)</span> 查询。</li></ul><p>注意如果放不满 <span class="math inline">\(k\)</span> 个 <spanclass="math inline">\(1\)</span>，那么最大子段和是 <spanclass="math inline">\(\max_{i=l}^{n} \{ s_{i,1} \} -s_{l,1}\)</span>。</p><p>复杂度 <span class="math inline">\(O(n)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, k, a[N];<br><span class="hljs-type">int</span> m, pos[N], ls[N], s1[N], s2[N];<br><span class="hljs-type">int</span> suf1[N], suf2[N];<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> lst=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        a[i]=<span class="hljs-built_in">read</span>();<br>        ls[i]=lst;<br>        s1[i]=s1[i<span class="hljs-number">-1</span>], s2[i]=s2[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">0</span>) &#123;<br>            pos[++m]=i;<br>            lst=m;<br>            ++s1[i], --s2[i];<br>        &#125; <span class="hljs-keyword">else</span> s1[i]+=a[i], s2[i]+=a[i];<br>    &#125;<br>    suf1[n+<span class="hljs-number">1</span>]=suf2[n+<span class="hljs-number">1</span>]=<span class="hljs-number">-1e9</span>;<br>    suf1[n]=s1[n], suf2[n]=s2[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i;--i) suf1[i]=<span class="hljs-built_in">max</span>(suf1[i+<span class="hljs-number">1</span>],s1[i]), suf2[i]=<span class="hljs-built_in">max</span>(suf2[i+<span class="hljs-number">1</span>],s2[i]);<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">1</span>, r=<span class="hljs-number">0</span>, ans=<span class="hljs-number">-1e9</span>;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) &#123;<br>        <span class="hljs-keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;i) ++l;<br>        <span class="hljs-type">int</span> w=ls[i]+k+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(w&gt;m) &#123;<br>            ans=<span class="hljs-built_in">max</span>(ans,suf1[i+<span class="hljs-number">1</span>]-s1[i]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> lim=pos[w];<br>        ans=<span class="hljs-built_in">max</span>(ans,suf2[lim]-s2[i]+<span class="hljs-number">2</span>*k);<br>        <span class="hljs-keyword">while</span>(p&lt;lim) &#123;<br>            <span class="hljs-keyword">while</span>(l&lt;=r&amp;&amp;s1[q[r]]&lt;s1[p]) --r;<br>            q[++r]=p;<br>            ++p;<br>        &#125;<br>        ans=<span class="hljs-built_in">max</span>(ans,s1[q[l]]-s1[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="agc004d-teleporter">AGC004D Teleporter</h2><p>连边 <span class="math inline">\(i \rightarrowa_i\)</span>，得到一棵内向树。问题转化为修改一些点的出边，使得每个点与<span class="math inline">\(1\)</span> 存在距离为 <spanclass="math inline">\(K\)</span> 的路径。</p><p>由于保证初始从任何位置出发都能到达 <spanclass="math inline">\(1\)</span>，说明 <spanclass="math inline">\(1\)</span> 是环上节点。</p><p>首先 <span class="math inline">\(1\)</span> 必须指向 <spanclass="math inline">\(1\)</span>，因为如果存在 <spanclass="math inline">\(1\)</span> 指向 <spanclass="math inline">\(x\)</span>，同时 <spanclass="math inline">\(x\)</span> 到 <spanclass="math inline">\(1\)</span> 的路径经过了 <spanclass="math inline">\(y\)</span>，那么 <spanclass="math inline">\(y\)</span> 一定不满足条件，注意 <spanclass="math inline">\(y\)</span> 可以等于 <spanclass="math inline">\(x\)</span>。</p><p>那么这就是一棵有向树了，考虑以 <span class="math inline">\(1\)</span>为根拎起来变成一棵树。</p><p>这类在树上有关到指定结构（点、环）距离的相关问题，一般都是按照从叶子到根的拓扑序贪心。</p><p>在 <span class="math inline">\(\text{DFS}\)</span> 求出 <spanclass="math inline">\(f_x\)</span> 表示 <spanclass="math inline">\(x\)</span> 子树内距离 <spanclass="math inline">\(1\)</span> 的最远距离和 <spanclass="math inline">\(dep_x\)</span>。如果 <spanclass="math inline">\(f_x - dep_x =k-1\)</span>，那么就把 <spanclass="math inline">\(x\)</span> 的出边指向 <spanclass="math inline">\(1\)</span>，同时 <spanclass="math inline">\(f_x\)</span> 置为 <spanclass="math inline">\(0\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, k, ans, to[N], dep[N], f[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span> </span>&#123;<br>    f[x]=dep[x]=dep[fa]+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) &#123;<br>        <span class="hljs-built_in">dfs</span>(y,x);<br>        f[x]=<span class="hljs-built_in">max</span>(f[x],f[y]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(to[x]!=<span class="hljs-number">1</span>&amp;&amp;f[x]-dep[x]==k<span class="hljs-number">-1</span>) &#123;<br>        ++ans;<br>        f[x]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) &#123;<br>        to[i]=<span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>) p[to[i]].<span class="hljs-built_in">pb</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(to[<span class="hljs-number">1</span>]!=<span class="hljs-number">1</span>) to[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>, ans=<span class="hljs-number">1</span>;<br>    dep[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="luogu8314-coci2021-20224-parkovi">luogu8314 [COCI2021-2022#4]Parkovi</h2><p>不放称没有公园的社区为白点，有公园的社区为黑点。</p><p>答案显然是有单调性的，直接二分答案，然后问题转化为求使得任意白点到黑点的最短距离不超过给定值<span class="math inline">\(lim\)</span> 最少需要几个黑点。</p><p>然后确定我们的贪心策略：</p><ul><li>自底向上。</li><li>一个点尽可能不放。</li></ul><p>由于以上两点，我们需要在 <spanclass="math inline">\(\text{LCA}\)</span> 处理若干子树的信息。</p><p>考虑在 <span class="math inline">\(\text{DFS}\)</span>的过程中求出当前节点与子树内任意黑点的最短距离 <spanclass="math inline">\(bla\)</span>，然后我们贪心地让其对应的那个黑点去覆盖其它子树内白点。具体的，设<span class="math inline">\(f_{x,0/1}\)</span> 为 <spanclass="math inline">\(x\)</span>与子树内任意黑点的最短路径长度/任意白点的最长路径长度，那么 <spanclass="math inline">\(bla=\min_{y \in son(x)}\{f_{y,0}+z\}\)</span>，然后我们拿着 <spanclass="math inline">\(bla\)</span> 再遍历一边 <spanclass="math inline">\(son(x)\)</span>，如果 <spanclass="math inline">\(f_{y,1}+z+bla \le lim\)</span>，那么就可以覆盖到<span class="math inline">\(y\)</span>。</p><p>唯一可能需要 <span class="math inline">\(x\)</span>处建立公园的情况，就是存在 <span class="math inline">\(f_{y,1} + z + bla&gt; lim\)</span>。我们令 <span class="math inline">\(whi\)</span>表示上述 <span class="math inline">\(y\)</span> 中 <spanclass="math inline">\(f_{y,1}+z\)</span> 的最大值，注意如果 <spanclass="math inline">\(bla&gt;lim\)</span>，那么 <spanclass="math inline">\(x\)</span> 也要算在内，距离可以看作 <spanclass="math inline">\(0\)</span>。</p><p>由于我们这样做后 <span class="math inline">\(whi\)</span> 不会达到<span class="math inline">\(2lim\)</span>，所以此时在 <spanclass="math inline">\(x\)</span> 放置公园就能解决所有问题。但如果 <spanclass="math inline">\(whi\)</span> 加上 <spanclass="math inline">\(x\)</span> 与 <spanclass="math inline">\(fa(x)\)</span> 的权值仍然不超过 <spanclass="math inline">\(lim\)</span>，那么我们可以把这些距离丢给 <spanclass="math inline">\(fa(x)\)</span> 处理，并且一定不会更劣。注意特判<span class="math inline">\(x=1\)</span> 的情况，此时只要 <spanclass="math inline">\(whi \ge 0\)</span> 就要在 <spanclass="math inline">\(x\)</span> 放。</p><p>如果没有在 <span class="math inline">\(x\)</span> 放置，那么 <spanclass="math inline">\(f_{x,0}=bla\)</span>，<spanclass="math inline">\(f_{x,1} = whi\)</span>；否则 <spanclass="math inline">\(f_{x,0}=0\)</span>，<spanclass="math inline">\(f_{x,1}= -\infty\)</span>。</p><p>输出方案随便记录一下即可，注意不足 <spanclass="math inline">\(k\)</span> 需要任选然后补齐。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>       <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>       c=<span class="hljs-built_in">getchar</span>();<br>   &#125;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>   <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>, inf=<span class="hljs-number">0x0f0f0f0f0f0f0f0f</span>;<br><span class="hljs-type">int</span> n, k, lim, f[N][<span class="hljs-number">2</span>];<br><span class="hljs-type">bool</span> v[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; res, ans;<br>vector&lt;PII &gt; p[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> pre)</span> </span>&#123;<br><span class="hljs-type">int</span> bla=inf, whi=-inf;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:p[x]) &#123;<br><span class="hljs-type">int</span> y=t.fi, z=t.se;<br><span class="hljs-keyword">if</span>(y==fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs</span>(y,x,z);<br>bla=<span class="hljs-built_in">min</span>(bla,f[y][<span class="hljs-number">0</span>]+z);<br>&#125;<br><span class="hljs-keyword">if</span>(bla&gt;lim) whi=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:p[x]) &#123;<br><span class="hljs-type">int</span> y=t.fi, z=t.se;<br><span class="hljs-keyword">if</span>(y==fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(f[y][<span class="hljs-number">1</span>]+z+bla&gt;lim) whi=<span class="hljs-built_in">max</span>(whi,f[y][<span class="hljs-number">1</span>]+z);<br>&#125;<br><span class="hljs-keyword">if</span>((whi+pre&gt;lim)||(x==<span class="hljs-number">1</span>&amp;&amp;whi&gt;=<span class="hljs-number">0</span>)) &#123;<br>res.<span class="hljs-built_in">pb</span>(x); <br>f[x][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>, f[x][<span class="hljs-number">1</span>]=-inf;<br>&#125; <span class="hljs-keyword">else</span> f[x][<span class="hljs-number">0</span>]=bla, f[x][<span class="hljs-number">1</span>]=whi;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>lim=mid;<br>res.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> res.<span class="hljs-built_in">size</span>()&lt;=k;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>(), z=<span class="hljs-built_in">read</span>();<br>p[x].<span class="hljs-built_in">pb</span>(&#123;y,z&#125;), p[y].<span class="hljs-built_in">pb</span>(&#123;x,z&#125;);<br>&#125;<br><span class="hljs-type">int</span> l=<span class="hljs-number">0</span>, r=<span class="hljs-number">2e14</span>;<br><span class="hljs-keyword">while</span>(l&lt;r) &#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) r=mid, ans=res;<br><span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,l);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,x), v[x]=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> x=<span class="hljs-number">1</span>, cnt=ans.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">while</span>(cnt&lt;k) &#123;<br><span class="hljs-keyword">while</span>(v[x]) ++x;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,x);<br>++x;<br>++cnt;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="loj3265.-usaco-2020.2-platinumdelegation">LOJ#3265. 「USACO2020.2 Platinum」Delegation</h2><p>答案显然有单调性，直接二分掉。</p><p>设二分的答案是 <span class="math inline">\(mid\)</span>。</p><p>考虑一个树形贪心。我们自底向上扩展每条链，在 <spanclass="math inline">\(x\)</span>处对链进行合并。在保证子树内合法的情况下，留下尽可能长的链来接上 <spanclass="math inline">\((x,fa_x)\)</span>。</p><p>一个性质：留下一条链一定比不留下更优秀。所以任何非根节点我们都要尽可能留下。</p><ul><li>如果子节点集合大小是奇数，那么我们尽可能将当前最短的那条链合并到最短且二者长度之和合法的那条链上，这样留下那条一定是最优的。</li><li>否则我们考虑把长度大于等于 <span class="math inline">\(k\)</span>的最短的链单独拿出来，剩下的链再重复上述过程。</li></ul><p>对于根节点，由于我们不能留下任何一条长度非法的链，所以我们就对当前最短链贪心匹配。如果子节点集合大小是奇数，那么就拿出来一条合法且长度最短的链。</p><p>记录每个点子树内留下的链的长度，使用<code>std::multiset</code>实现即可。</p><p>注意在贪心的过程中判掉非法情况。</p><p>复杂度 <span class="math inline">\(O(n \log^2 n)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>c=<span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, fg, f[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; p[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> k)</span> </span>&#123;<br>multiset&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:p[x]) <span class="hljs-keyword">if</span>(y!=fa) &#123;<br><span class="hljs-built_in">dfs</span>(y,x,k);<br><span class="hljs-keyword">if</span>(!fg) <span class="hljs-keyword">return</span>;<br>s.<span class="hljs-built_in">insert</span>(f[y]+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()&amp;<span class="hljs-number">1</span>) s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-keyword">auto</span> it=s.<span class="hljs-built_in">begin</span>();<br>s.<span class="hljs-built_in">erase</span>(it);<br><span class="hljs-keyword">auto</span> itt=s.<span class="hljs-built_in">lower_bound</span>(k-*it);<br><span class="hljs-keyword">if</span>(itt==s.<span class="hljs-built_in">end</span>()) &#123;<br>fg=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>s.<span class="hljs-built_in">erase</span>(itt);<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 扔进去一个0以找到长度合法且最短的链</span><br>    <span class="hljs-comment">// 如果找不到，那么非法</span><br><span class="hljs-type">int</span> qwq=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">auto</span> it=s.<span class="hljs-built_in">begin</span>();<br>s.<span class="hljs-built_in">erase</span>(it);<br><span class="hljs-keyword">auto</span> itt=s.<span class="hljs-built_in">lower_bound</span>(k-*it);<br><span class="hljs-keyword">if</span>(itt==s.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-keyword">if</span>(~qwq) &#123; fg=<span class="hljs-number">0</span>; <span class="hljs-keyword">return</span>; &#125;<br><span class="hljs-keyword">else</span> qwq=*it;<br>            <span class="hljs-comment">// 非法链最多有一条</span><br>&#125;<br><span class="hljs-keyword">else</span> s.<span class="hljs-built_in">erase</span>(itt);<br>&#125;<br><span class="hljs-keyword">if</span>(~qwq) f[x]=qwq;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()) f[x]=*s.<span class="hljs-built_in">begin</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>fg=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,mid);<br><span class="hljs-keyword">return</span> fg;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n=<span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) &#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>();<br>p[x].<span class="hljs-built_in">pb</span>(y), p[y].<span class="hljs-built_in">pb</span>(x);<br>&#125;<br><span class="hljs-type">int</span> l=<span class="hljs-number">1</span>, r=n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(l&lt;r) &#123;<br><span class="hljs-type">int</span> mid=(l+r+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) l=mid; <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,l);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="loj2952.-noip2018赛道修建">LOJ#2952. 「NOIP2018」赛道修建</h2><p>和上面那一题很相似，不同之处在于选出的链可以不覆盖整棵树，但选出的链的数量也有了限制。</p><p>仍然可以二分答案，这样我们选链的策略就是只要到达 <spanclass="math inline">\(mid\)</span>就行。所以本题中留下一条链一定是在子树内无法合并到 <spanclass="math inline">\(mid\)</span> 时。</p><p>用<code>std::multiset</code>维护子节点所在子树内连出的链，贪心匹配即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e4</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, m, k, f[N];<br>vector&lt;PII &gt; p[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t:p[x]) &#123;<br>        <span class="hljs-type">int</span> y=t.fi, z=t.se;<br>        <span class="hljs-keyword">if</span>(y==fa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y,x,mid);<br>        <span class="hljs-keyword">if</span>(f[y]+z&lt;mid) s.<span class="hljs-built_in">insert</span>(f[y]+z);<br>        <span class="hljs-keyword">else</span> ++k;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> p=s.<span class="hljs-built_in">begin</span>();<br>        s.<span class="hljs-built_in">erase</span>(p);<br>        <span class="hljs-type">int</span> a=*p, b=mid-a;<br>        <span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">size</span>()) &#123;<br>            f[x]=<span class="hljs-built_in">max</span>(f[x],a);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">auto</span> it=s.<span class="hljs-built_in">lower_bound</span>(b);<br>        <span class="hljs-keyword">if</span>(it==s.<span class="hljs-built_in">end</span>()) f[x]=<span class="hljs-built_in">max</span>(f[x],a);<br>        <span class="hljs-keyword">else</span> ++k, s.<span class="hljs-built_in">erase</span>(it);<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;f[%lld]=%lld\n&quot;,x,f[x]);</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>    k=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) f[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,mid);<br>    <span class="hljs-comment">// printf(&quot;mid=%lld m=%lld k=%lld\n&quot;,mid,m,k);</span><br>    <span class="hljs-keyword">return</span> k&gt;=m;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;track.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;track.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">1e9</span>, r=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) &#123;<br>        <span class="hljs-type">int</span> x=<span class="hljs-built_in">read</span>(), y=<span class="hljs-built_in">read</span>(), z=<span class="hljs-built_in">read</span>();<br>        p[x].<span class="hljs-built_in">pb</span>(&#123;y,z&#125;), p[y].<span class="hljs-built_in">pb</span>(&#123;x,z&#125;);<br>        l=<span class="hljs-built_in">min</span>(l,z), r+=z;<br>    &#125;<br>    r=(r+m<span class="hljs-number">-1</span>)/m;<br>    <span class="hljs-keyword">while</span>(l&lt;r) &#123;<br>        <span class="hljs-type">int</span> mid=(l+r+<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) l=mid; <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="loj2333.-joi-2017-final准高速电车">LOJ#2333. 「JOI 2017Final」准高速电车</h2><p>我们需要对题目给出的信息进行形式化。</p><p>先不考虑准快车，我们到达一个站点的最优策略一定是坐快车到那个站点最左边的快车站，然后坐慢车。这样我们能到达的站点一定是每个快车站往后一段，不妨设从第<span class="math inline">\(i\)</span>个快车站下车后坐慢车能到达的中站点个数为 <spanclass="math inline">\(t_i\)</span>。</p><p>在快车站建造的准快车站，其作用只有当我们坐快车到达这里时换乘准快车，所以可以先忽略。</p><p>不难发现我们第一次建造准快车站的位置一定是某个 <spanclass="math inline">\(S_i+t_i+1\)</span>，因为建的更靠前没有意义，更靠后无法到达，没有贡献。然后我们可以计算出从这个站点下车后坐慢车能够到达的位置。同时每个准快车站点一定是在个快车站的中间产生影响。</p><p>到这里问题就很明朗了。</p><p>我们开一个堆，维护在每个位置建造站点的收益。每次取出收益最大的位置，并算出通过它能够到达的最远位置，只要这个位置没有触及它右边的快车站点，就把这个位置加入堆。</p><p>每个时刻堆中元素个数只有 <span class="math inline">\(O(M)\)</span>个，总共取出 <span class="math inline">\(O(K)\)</span> 个元素，复杂度<span class="math inline">\(O(k \log M)\)</span>。</p><p>实现细节较多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3005</span>;<br><span class="hljs-type">int</span> n, m, k, A, B, C, T;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-type">int</span> s[N], t[N];<br><span class="hljs-type">bool</span> can[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> i, st, val;<br>    <span class="hljs-built_in">node</span>() &#123;&#125;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> id,<span class="hljs-type">int</span> ss) &#123;<br>        i=id, st=ss;<br>        <span class="hljs-type">int</span> tim=T-(s[i]<span class="hljs-number">-1</span>)*B-(st-s[i])*C;<br>        <span class="hljs-type">int</span> lim=s[i+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(tim&gt;=<span class="hljs-number">0</span>) val=<span class="hljs-number">1</span>+<span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(lim-st<span class="hljs-number">-1</span>,<span class="hljs-number">0ll</span>),tim/A);<br>        <span class="hljs-keyword">else</span> val=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> node&amp; rsh) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> val&lt;rsh.val;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br>    A=<span class="hljs-built_in">read</span>(), B=<span class="hljs-built_in">read</span>(), C=<span class="hljs-built_in">read</span>();<br>    T=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) s[i]=<span class="hljs-built_in">read</span>();<br>    k-=m;<br>    priority_queue&lt;node&gt; q;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">if</span>((s[i]<span class="hljs-number">-1</span>)*B&lt;=T) &#123;<br>            <span class="hljs-type">int</span> lim=s[i+<span class="hljs-number">1</span>];<br>            t[i]=<span class="hljs-built_in">min</span>((T-(s[i]<span class="hljs-number">-1</span>)*B)/A,<span class="hljs-built_in">max</span>(lim-s[i]<span class="hljs-number">-1</span>,<span class="hljs-number">0ll</span>));<br>            ans+=<span class="hljs-number">1</span>+t[i];<br>            <span class="hljs-keyword">if</span>(s[i]+t[i]+<span class="hljs-number">1</span>&lt;lim) q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(i,s[i]+t[i]+<span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((s[m]<span class="hljs-number">-1</span>)*B&lt;=T) ++ans;<br>    <span class="hljs-keyword">while</span>(k--) &#123;<br>        <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">break</span>;<br>        node t=q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(t.val==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        ans+=t.val;<br>        <span class="hljs-keyword">if</span>(t.st+t.val&lt;s[t.i+<span class="hljs-number">1</span>]) q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(t.i,t.st+t.val));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="loj2601.-noip2011观光公交">LOJ#2601. 「NOIP2011」观光公交</h2><p><span class="math inline">\(80\)</span>分做法，可以通过原题数据。</p><p>答案可以拆成每个游客的到达时间之和减去每个游客的来到出发地的时刻，后者可以直接得到。</p><p>我们每次使用加速，一定是对着效果最好的那个使用，这个是没有后效性的，但是要求每次操作后都重新求出这个最值。</p><p>下面重定义 <span class="math inline">\(D_i\)</span> 为从 <spanclass="math inline">\(i-1\)</span> 到 <spanclass="math inline">\(i\)</span> 的时间。考虑对一个 <spanclass="math inline">\(D_i\)</span> 使用加速的效果如何计算。</p><p>我们先得到 <span class="math inline">\(lim_i\)</span> 表示在车站<span class="math inline">\(i\)</span> 出发的人，到达 <spanclass="math inline">\(i\)</span> 的最晚时间，<spanclass="math inline">\(ar_i\)</span> 表示公交车到达第 <spanclass="math inline">\(i\)</span> 个车站的最早时间，显然 <spanclass="math inline">\(ar_i = \max(d_{i-1},lim_{i-1})+D_i\)</span>。</p><p>设 <span class="math inline">\(cnt_i\)</span> 为终点在第 <spanclass="math inline">\(i\)</span> 个车站的人数，<spanclass="math inline">\(w_i\)</span> 为对 <spanclass="math inline">\(D_i\)</span> 加速的收益，初始 <spanclass="math inline">\(w_i = cnt_i\)</span>。对 <spanclass="math inline">\(D_i\)</span> 加速后，如果 <spanclass="math inline">\(ar_i &gt; lim_i\)</span>，那么从站点 <spanclass="math inline">\(i\)</span> 往后走的人还需要等车，此时令 <spanclass="math inline">\(w_i \leftarroww_{i+1}\)</span>。这个影响可以叠加，倒着处理即可。</p><p>然后找最大的 <span class="math inline">\(w_i\)</span> 对应的 <spanclass="math inline">\(D_i\)</span> 进行操作。最后终点为 <spanclass="math inline">\(i\)</span> 的人的到达时间就是 <spanclass="math inline">\(ar_i\)</span>，总贡献是 <spanclass="math inline">\(\sum_{i=2}^n cnt_i \times ar_i\)</span>。</p><p>复杂度 <span class="math inline">\(O(nk)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, m, k, ans, d[N], ar[N], w[N];<br><span class="hljs-type">int</span> lim[N], cnt[N];<br><span class="hljs-keyword">namespace</span> bf &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) ar[i]=<span class="hljs-built_in">max</span>(lim[i<span class="hljs-number">-1</span>],ar[i<span class="hljs-number">-1</span>])+d[i];<br>        <span class="hljs-keyword">while</span>(k--) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;<span class="hljs-number">1</span>;--i) &#123;<br>                w[i]=cnt[i];<br>                <span class="hljs-keyword">if</span>(i!=n&amp;&amp;ar[i]&gt;lim[i]) w[i]+=w[i+<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) <span class="hljs-keyword">if</span>(w[i]&gt;w[x]&amp;&amp;d[i]&gt;<span class="hljs-number">0</span>) x=i;<br>            <span class="hljs-keyword">if</span>(x) --d[x];<br>            <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) ar[i]=<span class="hljs-built_in">max</span>(lim[i<span class="hljs-number">-1</span>],ar[i<span class="hljs-number">-1</span>])+d[i];<br>        &#125;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) ans+=cnt[i]*ar[i];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>(), m=<span class="hljs-built_in">read</span>(), k=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n) d[i]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m) &#123;<br>        <span class="hljs-type">int</span> t=<span class="hljs-built_in">read</span>(), a=<span class="hljs-built_in">read</span>(), b=<span class="hljs-built_in">read</span>();<br>        lim[a]=<span class="hljs-built_in">max</span>(lim[a],t);<br>        ++cnt[b];<br>        ans-=t;<br>    &#125;<br>    bf::<span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;贪心的基本思路是抹除后效性。&lt;/p&gt;
&lt;h2 id=&quot;luogu9378-thupc-2023-决赛-物理实验&quot;&gt;luogu9378 [THUPC 2023 决赛]
物理实验&lt;/h2&gt;
&lt;p&gt;尽可能保留编号小的实验一定是最优的。&lt;/p&gt;
&lt;p&gt;考虑维护一个集合 &lt;span class=&quot;math inline&quot;&gt;&#92;(S&#92;)&lt;/span&gt;
表示当前已经确定可以保留的实验集合，枚举实验 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 尝试加入，这样原问题就转化为了 &lt;span class=&quot;math inline&quot;&gt;&#92;(n&#92;)&lt;/span&gt; 轮判定问题。&lt;/p&gt;
&lt;p&gt;考虑如何 check。由于确定了 &lt;span class=&quot;math inline&quot;&gt;&#92;(S&#92;)&lt;/span&gt;
并且做 &lt;span class=&quot;math inline&quot;&gt;&#92;(S&#92;)&lt;/span&gt;
以外的实验没有意义，所以我们能求出每一轮应该出局的实验，同时求出第 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt; 个实验最晚被做完的时间 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim_i&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;接下来问题转化为：是否存在一个 &lt;span class=&quot;math inline&quot;&gt;&#92;(1 &#92;sim
n&#92;)&lt;/span&gt; 的排列，满足 &lt;span class=&quot;math inline&quot;&gt;&#92;(i&#92;)&lt;/span&gt;
所在的位置小于等于 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim_i&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;按照 &lt;span class=&quot;math inline&quot;&gt;&#92;(lim&#92;)&lt;/span&gt;
递增排序后贪心放即可。&lt;/p&gt;
&lt;p&gt;时间复杂度 &lt;span class=&quot;math inline&quot;&gt;&#92;(O(n^2m)&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; ll long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;       c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;   &amp;#125;&lt;br&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N=&lt;span class=&quot;hljs-number&quot;&gt;605&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, m, a[N], p[N][N], b[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; s[N], done[N], out[N];&lt;br&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; ans;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lim[x]&amp;lt;lim[y]; &amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) done[i]=out[i]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, lim[i]=n, b[i]=i;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,m) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(j,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!s[p[i][j]]&amp;amp;&amp;amp;!out[p[i][j]]) &amp;#123; k=j; &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; &amp;#125;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!k) k=n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; out[p[i][k]]=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(j,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,k&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s[p[i][j]]&amp;amp;&amp;amp;!done[p[i][j]]) lim[p[i][j]]=a[i], done[p[i][j]]=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(b+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,b+n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,cmp);&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;lim[b[i]]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    ans.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s[b[i]]) ans.&lt;span class=&quot;hljs-built_in&quot;&gt;pb&lt;/span&gt;(b[i]);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;(), m=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,m) a[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,m) &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(j,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) p[i][j]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) &amp;#123;&lt;br&gt;        s[i]=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;check&lt;/span&gt;()) s[i]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; x:ans) &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,x);&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;luogu9209-不灭不死鸟之尾&quot;&gt;luogu9209 不灭「不死鸟之尾」&lt;/h2&gt;</summary>
    
    
    
    <category term="Record" scheme="https://yozora0908.top/categories/Record/"/>
    
    
    <category term="贪心" scheme="https://yozora0908.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="决策单调性" scheme="https://yozora0908.top/tags/%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E6%80%A7/"/>
    
    <category term="树论" scheme="https://yozora0908.top/tags/%E6%A0%91%E8%AE%BA/"/>
    
    <category term="二分答案" scheme="https://yozora0908.top/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
    <category term="单调队列" scheme="https://yozora0908.top/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>luogu6406 [COCI2014-2015#2] Norma 题解</title>
    <link href="https://yozora0908.top/2023/lg6406-solution/"/>
    <id>https://yozora0908.top/2023/lg6406-solution/</id>
    <published>2023-11-11T00:35:26.000Z</published>
    <updated>2024-01-01T12:15:03.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solution">Solution</h2><p>考虑分治。</p><p>对于当前处理的区间 <spanclass="math inline">\([L,R]\)</span>，枚举左端点 <spanclass="math inline">\(l\)</span>，维护 <span class="math inline">\(mn =\min_{i=l}^{mid} \{a_i\}\)</span>，<span class="math inline">\(mx =\max_{i=l}^{mid} \{a_i\}\)</span>。</p><p>同时用 <span class="math inline">\(pos_0\)</span> 表示最靠右的 <spanclass="math inline">\(p\)</span>，满足 <span class="math inline">\(mn\le \min_{i=mid+1}^{p} \{a_i \}\)</span>，<spanclass="math inline">\(pos_1\)</span> 表示最靠右的 <spanclass="math inline">\(p\)</span>，满足 <span class="math inline">\(mx\ge \max_{i=mid+1}^{p} \{a_i \}\)</span>。</p><p>有了这些信息，我们就能将以 <span class="math inline">\(l\)</span>为左端点的区间根据右端点 <span class="math inline">\(r\)</span>的取值分为如下几类。</p><p>下面钦定 <span class="math inline">\(pos_0 \le pos_1\)</span>。</p><ol type="1"><li><p><spanclass="math inline">\([mid+1,pos_0]\)</span>。此时贡献的最值系数相等，提出来之后就是一个等差数列求和，写出来就是<span class="math display">\[\frac{\Big( (mid-l+1+1)+(pos_0-l+1) \Big) \times (pos_0-mid)}{2}\]</span></p></li><li><p><span class="math inline">\((pos_0,pos_1]\)</span>。这些区间的<span class="math inline">\(\min\)</span> 不满足条件，但 <spanclass="math inline">\(\max\)</span> 满足条件，所以贡献是 <spanclass="math display">\[mx \sum_{i=pos_0+1}^{pos_1} \Big((i-l+1) \min_{j=mid+1}^{i} \{a_j\}\Big)\]</span> 考虑如何计算这个和式。首先我们可以把 <spanclass="math inline">\([l,i]\)</span> 拆成 <spanclass="math inline">\([l,mid]\)</span> 与 <spanclass="math inline">\([mid+1,i]\)</span>，前者仅仅是作为贡献的一个系数，后者则可以用差分快速求出。具体地，维护<span class="math inline">\(\sum_{i=mid+1}^{R} (i-mid) \timespre_i\)</span> 与 <span class="math inline">\(\sum_{i=mid+1}^{R}pre_i\)</span>，其中 <span class="math inline">\(pre\)</span> 是前缀<span class="math inline">\(\min\)</span>。</p></li><li><p><span class="math inline">\((pos_1,R]\)</span>。此时与 <spanclass="math inline">\(mn\)</span> 和 <spanclass="math inline">\(mx\)</span> 均无关。 <span class="math display">\[\sum_{i=pos_1+1}^{R} (i-l+1) \min_{j=pos_1+1}^{i} \{a_j\}\max_{j=pos_1+1}^{i} \{a_j\}\]</span> 用类似的办法处理即可。</p></li></ol><p>对于 <span class="math inline">\(pos_0 &gt; pos_1\)</span>的情况，仅仅会对第二种贡献产生影响，对称着维护一个关于前缀 <spanclass="math inline">\(\max\)</span> 的东西就行。</p><p>代码中的变量名与上文有所不同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> uint unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> eb emplace_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPY(a,b) memcpy(a,b,sizeof(b))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,j,k) for(int i=(j);i&lt;=(k);++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i,j,k) for(int i=(j);i&gt;=(k);--i)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>; <span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        c=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>, c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> a*f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>, mod=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, ans, a[N];<br><span class="hljs-type">int</span> s1[N], s2[N], s3[N], s4[N], s5[N], s6[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> lim)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l=mid+<span class="hljs-number">1</span>-i+<span class="hljs-number">1</span>, r=lim-i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (l+r)*(lim-mid)/<span class="hljs-number">2</span>%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r) &#123; (ans+=a[l]*a[l]%mod)%=mod; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> pmn=a[mid+<span class="hljs-number">1</span>], pmx=a[mid+<span class="hljs-number">1</span>];<br>    s1[mid]=s2[mid]=s3[mid]=s4[mid]=s5[mid]=s6[mid]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid+<span class="hljs-number">1</span>;i&lt;=r;++i) &#123;<br>        pmn=<span class="hljs-built_in">min</span>(pmn,a[i]), pmx=<span class="hljs-built_in">max</span>(pmx,a[i]);<br>        s1[i]=(s1[i<span class="hljs-number">-1</span>]+(i-mid)*pmn%mod)%mod;<br>        s2[i]=(s2[i<span class="hljs-number">-1</span>]+pmn)%mod;<br>        s3[i]=(s3[i<span class="hljs-number">-1</span>]+(i-mid)*pmx%mod)%mod;<br>        s4[i]=(s4[i<span class="hljs-number">-1</span>]+pmx%mod)%mod;<br>        s5[i]=(s5[i<span class="hljs-number">-1</span>]+(i-mid)*pmx%mod*pmn%mod)%mod;<br>        s6[i]=(s6[i<span class="hljs-number">-1</span>]+pmx*pmn%mod)%mod;<br>    &#125;<br>    <span class="hljs-type">int</span> mn=a[mid], mx=a[mid], j=mid, k=mid;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid;i&gt;=l;--i) &#123;<br>        mn=<span class="hljs-built_in">min</span>(mn,a[i]), mx=<span class="hljs-built_in">max</span>(mx,a[i]);<br>        <span class="hljs-keyword">while</span>(j&lt;r&amp;&amp;a[j+<span class="hljs-number">1</span>]&gt;mn) ++j;<br>        <span class="hljs-keyword">while</span>(k&lt;r&amp;&amp;a[k+<span class="hljs-number">1</span>]&lt;mx) ++k;<br>        <span class="hljs-type">int</span> lim1=<span class="hljs-built_in">min</span>(j,k), lim2=<span class="hljs-built_in">max</span>(j,k);<br>        <span class="hljs-keyword">if</span>(lim1&gt;mid) (ans+=(mn*mx%mod*<span class="hljs-built_in">calc</span>(i,mid,lim1)%mod)%mod)%=mod;<br>        <span class="hljs-keyword">if</span>(j&gt;lim1) (ans+=mn*((s3[j]-s3[lim1]+mod)%mod+(mid-i+<span class="hljs-number">1</span>)*(s4[j]-s4[lim1]+mod)%mod)%mod)%=mod;<br>        <span class="hljs-keyword">if</span>(k&gt;lim1) (ans+=mx*((s1[k]-s1[lim1]+mod)%mod+(mid-i+<span class="hljs-number">1</span>)*(s2[k]-s2[lim1]+mod)%mod)%mod)%=mod;<br>        (ans+=(s5[r]-s5[lim2]+mod)%mod+(mid-i+<span class="hljs-number">1</span>)*(s6[r]-s6[lim2]+mod)%mod)%=mod;<br>    &#125;<br>    <span class="hljs-built_in">solve</span>(l,mid);<br>    <span class="hljs-built_in">solve</span>(mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) a[i]=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">solve</span>(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;考虑分治。&lt;/p&gt;
&lt;p&gt;对于当前处理的区间 &lt;span class=&quot;math inline&quot;&gt;&#92;([L,R]&#92;)&lt;/span&gt;，枚举左端点 &lt;span class=&quot;math inline&quot;&gt;&#92;(l&#92;)&lt;/span&gt;，维护 &lt;span class=&quot;math inline&quot;&gt;&#92;(mn =
&#92;min_{i=l}^{mid} &#92;{a_i&#92;}&#92;)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;&#92;(mx =
&#92;max_{i=l}^{mid} &#92;{a_i&#92;}&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;同时用 &lt;span class=&quot;math inline&quot;&gt;&#92;(pos_0&#92;)&lt;/span&gt; 表示最靠右的 &lt;span class=&quot;math inline&quot;&gt;&#92;(p&#92;)&lt;/span&gt;，满足 &lt;span class=&quot;math inline&quot;&gt;&#92;(mn
&#92;le &#92;min_{i=mid+1}^{p} &#92;{a_i &#92;}&#92;)&lt;/span&gt;，&lt;span class=&quot;math inline&quot;&gt;&#92;(pos_1&#92;)&lt;/span&gt; 表示最靠右的 &lt;span class=&quot;math inline&quot;&gt;&#92;(p&#92;)&lt;/span&gt;，满足 &lt;span class=&quot;math inline&quot;&gt;&#92;(mx
&#92;ge &#92;max_{i=mid+1}^{p} &#92;{a_i &#92;}&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;有了这些信息，我们就能将以 &lt;span class=&quot;math inline&quot;&gt;&#92;(l&#92;)&lt;/span&gt;
为左端点的区间根据右端点 &lt;span class=&quot;math inline&quot;&gt;&#92;(r&#92;)&lt;/span&gt;
的取值分为如下几类。&lt;/p&gt;
&lt;p&gt;下面钦定 &lt;span class=&quot;math inline&quot;&gt;&#92;(pos_0 &#92;le pos_1&#92;)&lt;/span&gt;。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;([mid+1,pos_0]&#92;)&lt;/span&gt;。此时贡献的最值系数相等，提出来之后就是一个等差数列求和，写出来就是
&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;frac{&#92;Big( (mid-l+1+1)+(pos_0-l+1) &#92;Big) &#92;times (pos_0-mid)}{2}
&#92;]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;((pos_0,pos_1]&#92;)&lt;/span&gt;。这些区间的
&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;min&#92;)&lt;/span&gt; 不满足条件，但 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;max&#92;)&lt;/span&gt; 满足条件，所以贡献是 &lt;span class=&quot;math display&quot;&gt;&#92;[
mx &#92;sum_{i=pos_0+1}^{pos_1} &#92;Big((i-l+1) &#92;min_{j=mid+1}^{i} &#92;{a_j&#92;}&#92;Big)
&#92;]&lt;/span&gt; 考虑如何计算这个和式。首先我们可以把 &lt;span class=&quot;math inline&quot;&gt;&#92;([l,i]&#92;)&lt;/span&gt; 拆成 &lt;span class=&quot;math inline&quot;&gt;&#92;([l,mid]&#92;)&lt;/span&gt; 与 &lt;span class=&quot;math inline&quot;&gt;&#92;([mid+1,i]&#92;)&lt;/span&gt;，前者仅仅是作为贡献的一个系数，后者则可以用差分快速求出。具体地，维护
&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;sum_{i=mid+1}^{R} (i-mid) &#92;times
pre_i&#92;)&lt;/span&gt; 与 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;sum_{i=mid+1}^{R}
pre_i&#92;)&lt;/span&gt;，其中 &lt;span class=&quot;math inline&quot;&gt;&#92;(pre&#92;)&lt;/span&gt; 是前缀
&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;min&#92;)&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;((pos_1,R]&#92;)&lt;/span&gt;。此时与 &lt;span class=&quot;math inline&quot;&gt;&#92;(mn&#92;)&lt;/span&gt; 和 &lt;span class=&quot;math inline&quot;&gt;&#92;(mx&#92;)&lt;/span&gt; 均无关。 &lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;sum_{i=pos_1+1}^{R} (i-l+1) &#92;min_{j=pos_1+1}^{i} &#92;{a_j&#92;}
&#92;max_{j=pos_1+1}^{i} &#92;{a_j&#92;}
&#92;]&lt;/span&gt; 用类似的办法处理即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 &lt;span class=&quot;math inline&quot;&gt;&#92;(pos_0 &amp;gt; pos_1&#92;)&lt;/span&gt;
的情况，仅仅会对第二种贡献产生影响，对称着维护一个关于前缀 &lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;max&#92;)&lt;/span&gt; 的东西就行。&lt;/p&gt;
&lt;p&gt;代码中的变量名与上文有所不同。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; int long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; uint unsigned long long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; PII pair&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;int,int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MP make_pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; fi first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; se second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; pb push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; eb emplace_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; SET(a,b) memset(a,b,sizeof(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CPY(a,b) memcpy(a,b,sizeof(b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; rep(i,j,k) for(int i=(j);i&amp;lt;=(k);++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; per(i,j,k) for(int i=(j);i&amp;gt;=(k);--i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, f=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) &amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;) f=&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;&lt;br&gt;        c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isdigit&lt;/span&gt;(c)) a=a*&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;+c-&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, c=&lt;span class=&quot;hljs-built_in&quot;&gt;getchar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a*f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; N=&lt;span class=&quot;hljs-number&quot;&gt;5e5&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, mod=&lt;span class=&quot;hljs-number&quot;&gt;1e9&lt;/span&gt;;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, ans, a[N];&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s1[N], s2[N], s3[N], s4[N], s5[N], s6[N];&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mid,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l=mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, r=lim-i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (l+r)*(lim-mid)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;%mod;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(l==r) &amp;#123; (ans+=a[l]*a[l]%mod)%=mod; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;; &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pmn=a[mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], pmx=a[mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;br&gt;    s1[mid]=s2[mid]=s3[mid]=s4[mid]=s5[mid]=s6[mid]=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=r;++i) &amp;#123;&lt;br&gt;        pmn=&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(pmn,a[i]), pmx=&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(pmx,a[i]);&lt;br&gt;        s1[i]=(s1[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+(i-mid)*pmn%mod)%mod;&lt;br&gt;        s2[i]=(s2[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+pmn)%mod;&lt;br&gt;        s3[i]=(s3[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+(i-mid)*pmx%mod)%mod;&lt;br&gt;        s4[i]=(s4[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+pmx%mod)%mod;&lt;br&gt;        s5[i]=(s5[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+(i-mid)*pmx%mod*pmn%mod)%mod;&lt;br&gt;        s6[i]=(s6[i&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;]+pmx*pmn%mod)%mod;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; mn=a[mid], mx=a[mid], j=mid, k=mid;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=mid;i&amp;gt;=l;--i) &amp;#123;&lt;br&gt;        mn=&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(mn,a[i]), mx=&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(mx,a[i]);&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(j&amp;lt;r&amp;amp;&amp;amp;a[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&amp;gt;mn) ++j;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(k&amp;lt;r&amp;amp;&amp;amp;a[k+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&amp;lt;mx) ++k;&lt;br&gt;        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; lim1=&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(j,k), lim2=&lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(j,k);&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lim1&amp;gt;mid) (ans+=(mn*mx%mod*&lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(i,mid,lim1)%mod)%mod)%=mod;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j&amp;gt;lim1) (ans+=mn*((s3[j]-s3[lim1]+mod)%mod+(mid-i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(s4[j]-s4[lim1]+mod)%mod)%mod)%=mod;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k&amp;gt;lim1) (ans+=mx*((s1[k]-s1[lim1]+mod)%mod+(mid-i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(s2[k]-s2[lim1]+mod)%mod)%mod)%=mod;&lt;br&gt;        (ans+=(s5[r]-s5[lim2]+mod)%mod+(mid-i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(s6[r]-s6[lim2]+mod)%mod)%=mod;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;solve&lt;/span&gt;(l,mid);&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;solve&lt;/span&gt;(mid+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,r);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;br&gt;    n=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;(i,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n) a[i]=&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt;();&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;solve&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n);&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%lld&#92;n&amp;quot;&lt;/span&gt;,ans);&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="题解" scheme="https://yozora0908.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="决策单调性" scheme="https://yozora0908.top/tags/%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E6%80%A7/"/>
    
    <category term="分治" scheme="https://yozora0908.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
</feed>
